<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bryce&#39;s ox</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-12T11:54:25.277Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bryce Wei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Softmax Regression</title>
    <link href="http://yoursite.com/2019/08/12/softmax-regression/"/>
    <id>http://yoursite.com/2019/08/12/softmax-regression/</id>
    <published>2019-08-12T11:25:43.000Z</published>
    <updated>2019-08-12T11:54:25.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>softmax回归是logistic regression的推广。<br>Logistic Regression是求2个后验概率：$P(y=0|x;\theta)$和$P(y=1|x;\theta)$ ,而Softmax Regerssion则是求k个概率，k即为分类的个数，最后取最大的概率 </p></blockquote><h1 id="Softmax函数"><a href="#Softmax函数" class="headerlink" title="Softmax函数"></a>Softmax函数</h1><blockquote><p>在直接写softmax regression公式之前，先来介绍一下softmax函数  、</p></blockquote><p>softmax function，又称归一化指数函数， 是logistic function的一种推广。该函数应用广泛，在多项式逻辑回归、多项线性判别分析、朴素贝叶斯分类、人工神经网络、深度学习等多种<strong>基于概率</strong>的<strong>多分类</strong>问题中都有应用。  </p><p>其表达式为：<br>$$<br>\sigma (z)_j = \frac{e^{z_j}}{\sum_{k=1}^{K}e^{z_k}} 1; j=1,2,3,…,K.<br>$$</p><h1 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis"></a>Hypothesis</h1><p>$$<br>h_\theta(x) = \left[<br>                \begin{matrix}<br>                    P(y=1|x; \theta) \\<br>                    P(y=2|x; \theta) \\<br>                    \cdots \\<br>                    P(y=k|x; \theta)<br>                \end{matrix}<br>              \right]<br>            = \frac{1}{\sum_{j=1}^{K}e^{\theta_j^Tx}} \left[<br>            \begin{matrix}<br>                e^{\theta_1^Tx} \<br>                e^{\theta_2^Tx} \<br>                \cdots \<br>                e^{\theta_k^Tx} \<br>            \end{matrix}<br>            \right]<br>$$</p><ul><li>保证所有概率之和等于1</li></ul><h1 id="Cost"><a href="#Cost" class="headerlink" title="Cost"></a>Cost</h1><ul><li><p>同logistic，也采用对数损失函数<br>$$<br>\begin{aligned}<br>J_\theta(x) = cost(h_\theta(x), y)  = - \frac{1}{m} \left[ \sum_{i=1}^{m} \sum_{j=1}^{K} I\{y^{(i)}=j\} log{\frac{e^{\theta_j^Tx^{(i)}}}{\sum_{k=1}^{K}e^{\theta_k^Tx^{(i)}}}} \right] + \frac{\lambda}{2}\theta^2<br>\end{aligned}<br>$$</p></li><li><p>其中$I\{y^{(i)}=j\}$指的是：当{}内为真时，I值为1；当{}内为假时，I值为0</p></li><li><p>${\frac{e^{\theta_j^Tx^{(i)}}}{\sum_{k=1}^{K}e^{\theta_k^Tx^{(i)}}}}$项即为$h_\theta(x)$</p></li><li><p>$\frac{\lambda}{2}\theta^2$为附加的正则项，即regularization项</p></li></ul><h1 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h1><p>问题即求cost最小时的$\theta$的取值<br>采用<strong>Gradient Descent</strong>方法来求解$minimize(loss)$</p><p>令：<br>$W = (\omega_1, \omega_2, \omega_3, …, \omega_n, b)^T $<br>$X = (x_1, x_2, x_3, …, x_n, 1)^T $<br>$Y = (y_1, y_2, y_3, …, y_n)^T $ </p><p>梯度下降法，先求梯度，即对$\theta$求导数得：<br>$$<br>\frac{\partial J(\theta)}{\partial \theta} = - \frac{1}{m} \sum_{j=1}^{m} \left[x^{(i)}(I\{y^{(i)} = j\} - P(y^{(i)}=j|x^{(i)}; \theta)) \right] + \lambda \theta_j<br>$$</p><p>其中：<br>$$<br>P(y^{(i)}=j|x^{(i)}; \theta)) = log \frac{e^{\theta_j^Tx^{(i)}}}{\sum_{n=1}^{K}e^{\theta_n^Tx^{(i)}}}<br>$$</p><p>沿着梯度下降更新$\theta$的值为：<br>$$<br>\theta = \theta - \alpha \frac{\partial J(\theta)}{\partial \theta}<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;softmax回归是logistic regression的推广。&lt;br&gt;Logistic Regression是求2个后验概率：$P(y=0|x;\theta)$和$P(y=1|x;\theta)$ ,而Softmax Regerssion则是求
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="softmax回归" scheme="http://yoursite.com/tags/softmax%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Logistic Regression</title>
    <link href="http://yoursite.com/2019/08/07/logistic-regression/"/>
    <id>http://yoursite.com/2019/08/07/logistic-regression/</id>
    <published>2019-08-07T13:09:30.000Z</published>
    <updated>2019-08-07T14:03:29.911Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>logistic回归不是回归，而是分类</p></blockquote><h1 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h1><blockquote><p>在直接写logistic regression的相关公式之前，先来介绍下sigmoid函数  </p></blockquote><p><strong>Sigmoid function</strong>，一般简称S函数，其形状如下：<br><img src="/assets/blogimg/ml/sigmoid.png"></p><p>其表达式为：<br>$$<br>g(z) = \frac{1}{1 + e^{-z}}<br>$$  </p><ul><li>sigmoid函数的值在<strong>0~1</strong>之间</li><li>sigmoid函数求导后的值为：$g’(x) = g(x)·(1-g(x))$</li></ul><h1 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis"></a>Hypothesis</h1><p>$$<br>h_\omega(x) = g(\omega^T x) = \frac{1}{1 + e^{-\omega^Tx}}<br>$$</p><ul><li><p>从公式推导来说，这里应该是”$\omega x+b$”,只是在coding时一般把b加到了”$\omega;x=1$”中，不再单独列出来。影响不大。</p></li><li><p>$h_\omega(x)$表示在$\omega$确定的情况下，根据$x$计算出的结果<strong>输出为1的可能性</strong>，即后验概率：<br>$$<br>h_\omega(x) = P(y=1|x;\omega)<br>$$</p></li><li><p>用概率表来描述分类器，<strong>比阶跃形式更加顺滑，更加连续</strong>。</p></li></ul><h1 id="Cost"><a href="#Cost" class="headerlink" title="Cost"></a>Cost</h1><ul><li>loss，这里采用对数损失函数</li><li>不用linear regression一样选用平方损失函数是因为：将上述$h_\omega(x)$带入平方loss后得到的是<strong>非凸函数</strong>，后续梯度下降法不一定能得到全局最优解，很可能得到的是局部最优。选用对数loss能得到凸函数。<br>$$<br>L(f)=L(h_\omega(x)) = -y·logP(y|x) = -y·log(h_\omega(x)) - (1-y)·log(1-h_\omega(x))<br>$$</li></ul><h1 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h1><p>问题即求cost最小时的$\omega$的取值  </p><p>采用<strong>Gradient Descent</strong>方法来求解$minimize(loss)$  </p><p>令：<br>$W = (\omega_1, \omega_2, \omega_3, …, \omega_n, b)^T $<br>$X = (x_1, x_2, x_3, …, x_n, 1)^T $<br>$Y = (y_1, y_2, y_3, …, y_n)^T $ </p><p>则：<br>$$<br> J(\omega) = minimize(loss) = arg min(-y·log(h_\omega(x)) - (1-y)·log(1-h_\omega(x)))<br>$$</p><p>为求极小值，对其进行求导：<br>$$<br> \frac{\partial J(\omega)}{\partial \omega} = (h_\omega(x)-y)x<br>$$</p><blockquote><p>很巧合的是，这里求导得到的结果的形式与linear regression求导得到的形式一致，但是实质上将$h_\omega(x)$带入后结果是不一样的  </p></blockquote><p>梯度方向即为导数方向，沿着梯度下降则为：<br>$$<br>\omega_j = \omega_j - \alpha \frac{\partial J(\omega)}{\partial \omega_j}<br>$$<br>更新$\omega$的值，即为训练阶段  </p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><blockquote><p>Handwriting Machine Learning系列详见<a href="https://github.com/bryce-wei/handwriting_machingLearning" target="_blank" rel="noopener">github</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticRegression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, X_train, Y_train, learning_rate=<span class="number">0.1</span>, epochs=<span class="number">10000</span>, threshold=<span class="number">0.0001</span>)</span>:</span></span><br><span class="line">        self.X_train = X_train</span><br><span class="line">        self.Y_train = Y_train</span><br><span class="line">        self.theta =  np.random.rand(<span class="number">1</span>, self.X_train.shape[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">        self.grad = <span class="literal">None</span></span><br><span class="line">        self.learning_rate = learning_rate</span><br><span class="line">        self.epochs = epochs</span><br><span class="line">        self.threshold = threshold</span><br><span class="line">        self.cost = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 计算sigmoid函数： 1/(1+e^(-x))</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-x))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logistic_hypo</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 计算hypothesis</span></span><br><span class="line"><span class="string">            x = (x1, x2, x3, ..., xn, 1)</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> self.sigmoid(np.dot(np.c_[np.ones(x.shape[<span class="number">0</span>]), x], self.theta.T))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logistic_cost</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 计算损失</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        y_hat = self.logistic_hypo(x)</span><br><span class="line">        self.cost = - np.sum((y * np.log(y_hat) + (<span class="number">1.0</span> - y) * np.log(<span class="number">1.0</span> - y_hat)))</span><br><span class="line">        self.cost = self.cost * <span class="number">1.0</span> / x.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logistic_grad</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 计算梯度</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.grad = np.dot((self.logistic_hypo(x) - y).T, np.c_[np.ones(x.shape[<span class="number">0</span>]), x])</span><br><span class="line">        self.grad = self.grad / x.shape[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logistic_grad_desc</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 用梯度下降法来进行优化</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.logistic_cost(self.X_train, self.Y_train)</span><br><span class="line">        cost_change = <span class="number">1.0</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> cost_change &gt; self.threshold <span class="keyword">and</span> i &lt; self.epochs:</span><br><span class="line">            <span class="comment"># 沿着梯度的方向更新参数theta的值</span></span><br><span class="line">            self.logistic_grad(self.X_train, self.Y_train)</span><br><span class="line">            self.theta = self.theta - self.learning_rate * self.grad</span><br><span class="line">            pre_cost = self.cost</span><br><span class="line">            self.logistic_cost(self.X_train, self.Y_train)</span><br><span class="line">            cost_change = abs(self.cost - pre_cost)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 每100次输出一次loss大小</span></span><br><span class="line">                print(<span class="string">"-------%d ---- loss = %f"</span> %(i ,self.cost))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: emm, sklearn里面的fit函数 </span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.logistic_grad_desc()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># def predict(self, x):</span></span><br><span class="line">    <span class="comment">#     '''</span></span><br><span class="line">    <span class="comment">#     @description: 预测</span></span><br><span class="line">    <span class="comment">#     @param &#123;type&#125; </span></span><br><span class="line">    <span class="comment">#     @return: </span></span><br><span class="line">    <span class="comment">#     '''</span></span><br><span class="line">    <span class="comment">#     y_pre = self.logistic_hypo(x)</span></span><br><span class="line">    <span class="comment">#     return y_pre</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X, hard=True)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 预测 </span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        X = (X - np.mean(X, axis=<span class="number">0</span>)) / np.std(X, axis=<span class="number">0</span>)</span><br><span class="line">        pred_prob = self.logistic_hypo(X)</span><br><span class="line">        pred_value = np.where(pred_prob &gt; <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> hard:</span><br><span class="line">            <span class="keyword">return</span> pred_value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> pred_prob</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># test</span></span><br><span class="line">    <span class="comment"># 加载sklean中自带的数据集</span></span><br><span class="line">    dataset = datasets.load_iris()</span><br><span class="line">    <span class="comment"># 选择维度</span></span><br><span class="line">    X = dataset.data[<span class="number">0</span>:<span class="number">100</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    Y = dataset.target[:<span class="number">100</span>, <span class="literal">None</span>]</span><br><span class="line">    <span class="comment"># 切分数据集为训练集和测试集</span></span><br><span class="line">    idx_trn = list(range(<span class="number">30</span>))</span><br><span class="line">    idx_trn.extend(range(<span class="number">50</span>, <span class="number">80</span>))</span><br><span class="line">    idx_tst = list(range(<span class="number">30</span>, <span class="number">50</span>))</span><br><span class="line">    idx_tst.extend(range(<span class="number">80</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">    X_train = X[idx_trn]</span><br><span class="line">    X_test = X[idx_tst]</span><br><span class="line"></span><br><span class="line">    Y_train = Y[idx_trn]</span><br><span class="line">    Y_test = Y[idx_tst]</span><br><span class="line">    </span><br><span class="line">    lr = LogisticRegression(X_train, Y_train)</span><br><span class="line">    lr.fit()</span><br><span class="line">    y_pre = lr.predict(X_test)</span><br><span class="line">    print(y_pre - Y_test)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;logistic回归不是回归，而是分类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;sigmoid函数&quot;&gt;&lt;a href=&quot;#sigmoid函数&quot; class=&quot;headerlink&quot; title=&quot;sigmoid函数&quot;&gt;&lt;/a&gt;sigmo
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="逻辑回归" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>hexo mathjax无法渲染</title>
    <link href="http://yoursite.com/2019/08/01/hexo%20mathjax%E6%97%A0%E6%B3%95%E6%B8%B2%E6%9F%93/"/>
    <id>http://yoursite.com/2019/08/01/hexo mathjax无法渲染/</id>
    <published>2019-08-01T04:40:28.000Z</published>
    <updated>2019-08-02T11:54:43.856Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>同名文章已发表于<a href="https://www.jianshu.com/p/d43535c17ce2" target="_blank" rel="noopener">简书</a>  </p></blockquote><p>本文主要记录出现问题，去找问题，踩了一些坑，最后回归本源找到问题并解决问题的过程</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>本地hexo s启服务能正确显示，推到远端github或者博客上就无法显示   </p><p>本地正常显示：  </p><p><img src="https://upload-images.jianshu.io/upload_images/17565124-b2d8a941aec3e778.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="localhost.png"></p><br>远端博客无法渲染:  <p><img src="https://upload-images.jianshu.io/upload_images/17565124-ac12da8b72c80b38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="blog.png"></p><h1 id="找问题的过程"><a href="#找问题的过程" class="headerlink" title="找问题的过程"></a>找问题的过程</h1><h2 id="怀疑主题没有做很好的兼容"><a href="#怀疑主题没有做很好的兼容" class="headerlink" title="怀疑主题没有做很好的兼容"></a>怀疑主题没有做很好的兼容</h2><p>一开始是怀疑这个问题的，因为这个主题的作者太佛系，介绍也就一句话，issue也少，fork人气也不高<br>如下两句话，还是废话…   </p><p><img src="https://upload-images.jianshu.io/upload_images/17565124-503924576c7d13d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fexo.png"></p><p>更关键的，这个文档还是16年的，如今3年过去了…技术怎么着也得更新了吧…  </p><p>于是傻傻的继续往下做实验  </p><h2 id="怀疑插件问题"><a href="#怀疑插件问题" class="headerlink" title="怀疑插件问题"></a>怀疑插件问题</h2><p>之所以怀疑这个问题，是因为google相关问题后，一堆出现推荐xxx插件的博文，点开一看其实很多都差不多，到处复制而已  </p><p>然后我也屁颠屁颠试咯下，结果仍然是不行  </p><p>emmm…前前后后实验各种插件，各种折腾，环境各种被玩坏，一上午基本都在这种折腾中过去了  </p><ul><li>hexo-math</li><li>hexo-katex</li><li>hexo-renderer-mathjax</li><li>hexo-renderer-pandoc</li><li>…  </li></ul><h2 id="备份的重要性"><a href="#备份的重要性" class="headerlink" title="备份的重要性"></a>备份的重要性</h2><p>这里强调下，在找问题的过程中，如果需要改变环境配置、插件、或者其他的你不能一一记下的东西时，最好先把目前稳定的环境打个包backup一下，避免后面改出问题来了，也没法回到目前的稳定版本  </p><h2 id="回到最开始状态"><a href="#回到最开始状态" class="headerlink" title="回到最开始状态"></a>回到最开始状态</h2><p>折腾了快一上午了，仍然解决不了我目前的问题 ，于是发现似乎是上面两个假设不太成立…  </p><p>最后整理一下郁闷的心情，决定从头开始再分析一遍  </p><p>如今啊，发现问题就上来一顿Google，有时候确实能解决不少问题  </p><p>而有时候，却让人疏忽了真正解决问题的方法和能力  </p><p>看看时间，已经到饭点了，随手抓起一个面包，灌一口水，重新打起精神  </p><p>这次先加载最初出问题的相对稳定的那个版本  </p><p>重新编译生成静态网页，启服务，访问，本地依然完美，推到博客依然失败  </p><p>但是这次仔细观察，发现远端出现了一点不一样的地方  </p><p><img src="https://upload-images.jianshu.io/upload_images/17565124-828f1df0d2e8fc75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="blog2.png">  </p><p>瞬间一个机灵，怕是问题在这里了，果断点了上去  </p><p><img src="https://upload-images.jianshu.io/upload_images/17565124-2b0baf1986380527.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="blog3.png">  </p><p>看到这里，我心里预感，这次应该是找到问题了，估计是被拦截脚本了，继续加载  </p><p><img src="https://upload-images.jianshu.io/upload_images/17565124-64e72c5e1e2f8c37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="blog4.png">  </p><p>果然，点了加载脚本就能显示公式了，但是这里出现了不安全，https也被横杀了  </p><h2 id="终于找到问题"><a href="#终于找到问题" class="headerlink" title="终于找到问题"></a>终于找到问题</h2><p>其实，到了这里问题已经被找到了，原因就是网页中需要加载不信任的js脚本，而网站默认不加载，导致了公式没法被js渲染出来<br>接下来就是怎么解决这个问题了，总不能每次都让人点这个<code>小x盾</code>，再让人点加载<code>不安全的脚本</code>吧，难道还得写个博客访问指南么…   </p><p>一个字 low…  </p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><h2 id="关闭https"><a href="#关闭https" class="headerlink" title="关闭https"></a>关闭https</h2><p>一种方法是关闭自己博客的https链接，直接http访问  </p><p>因为我的博客是挂载在github.io上的，默认开启了https，关闭方法如下：  </p><ul><li>找到github上的xxx.github.io的repo</li><li>进入settings页签</li><li>找到如下，把Enforce https<strong>取消勾选</strong>即可  </li></ul><p><img src="https://upload-images.jianshu.io/upload_images/17565124-e0cfaf29a516dfcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="https.png"></p><h2 id="脚本链接选择https"><a href="#脚本链接选择https" class="headerlink" title="脚本链接选择https"></a>脚本链接选择https</h2><p>上面的方法虽然可行，但是牺牲掉了一定的安全性，安全出身的我果然不能这样忘本  </p><p>那就选择第二条路吧：在mathjax脚本中修改http脚本链接到https  </p><p>方法如下：  </p><ul><li><p>定位到：<br><code>xxx\node_modules\hexo-renderer-mathjax\mathjax.html</code></p></li><li><p>把原来的：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修改为：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>再重新编译，推送，访问：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><p>Jod done !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;同名文章已发表于&lt;a href=&quot;https://www.jianshu.com/p/d43535c17ce2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文主要记录
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="mathjax" scheme="http://yoursite.com/tags/mathjax/"/>
    
  </entry>
  
  <entry>
    <title>Linear Regression</title>
    <link href="http://yoursite.com/2019/07/31/linear-regression/"/>
    <id>http://yoursite.com/2019/07/31/linear-regression/</id>
    <published>2019-07-31T14:04:18.000Z</published>
    <updated>2019-08-07T13:54:09.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis"></a>Hypothesis</h1><p>$$<br>h_\omega(x)=\omega x+b<br>$$</p><ul><li>$\omega$与$x$为标量时，则为单变量线性回归  </li><li>$\omega$与$x$为向量时，则为多变量线性回归  </li></ul><h1 id="Cost"><a href="#Cost" class="headerlink" title="Cost"></a>Cost</h1><ul><li>loss，这里采用平方损失函数  </li></ul><p>$$<br>L(f)=L(h_\omega(x))=\sum_{i=1}^{n}{(\omega x_i+b - y_i)^2}<br>$$</p><h1 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h1><p>问题即求cost最小时的$\omega$的取值  </p><p>采用<strong>Gradient Descent</strong>方法来求解$minimize(loss)$  </p><blockquote><p>实际上线性回归的最优化问题可以直接使用最小二乘法获得解析解  </p></blockquote><p>令：<br>$W = (\omega_1, \omega_2, \omega_3, …, \omega_n, b)^T $<br>$X = (x_1, x_2, x_3, …, x_n, 1)^T $<br>$Y = (y_1, y_2, y_3, …, y_n)^T $ </p><p>则：<br>$$<br>J(\omega) = minimize(loss) = arg min(WX-Y)^2<br>$$</p><p>为求极小值，对其进行求导：<br>$$<br>\frac{\partial J(\omega)}{\partial \omega_j} = 2(h_\omega(x)-y)x_j<br>$$<br>梯度方向即为导数方向，沿着梯度下降则为：<br>$$<br>\omega_j = \omega_j - \alpha \frac{\partial J(\omega)}{\partial \omega_j}<br>$$<br>更新$\omega$的值，即为训练阶段  </p><h1 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h1><p>参数过多时容易过拟合，引用正则化对所有参数$\omega$进行惩罚，确保每个$\omega$都取较小值  </p><p>L1 (Lasso Regression)：<br>$$<br>minimize(loss) = arg min(WX-Y)^2 + \lambda||\omega||<br>$$</p><p>L2 (Ridge Regression)：<br>$$<br>minimize(loss) = arg min(WX-Y)^2 + \lambda||\omega||^2<br>$$</p><p>L1 &amp; L2 (Elastic Regression)：<br>$$<br>minimize(loss) = arg min(WX-Y)^2 + \frac{\lambda(1-\rho)}{2}||\omega||^2<br>$$</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><blockquote><p>Handwriting Machine Learning系列详见<a href="https://github.com/bryce-wei/handwriting_machingLearning" target="_blank" rel="noopener">github</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearRegression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, X_train, Y_train, learning_rate=<span class="number">0.1</span>, epochs=<span class="number">10000</span>, threshold=<span class="number">0.0001</span>)</span>:</span></span><br><span class="line">        self.X_train = X_train</span><br><span class="line">        self.Y_train = Y_train</span><br><span class="line">        self.theta =  np.random.rand(<span class="number">1</span>, self.X_train.shape[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">        self.grad = <span class="number">0</span></span><br><span class="line">        self.learning_rate = learning_rate</span><br><span class="line">        self.epochs = epochs</span><br><span class="line">        self.threshold = threshold</span><br><span class="line">        self.cost = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_hypo</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 计算hypothesis</span></span><br><span class="line"><span class="string">            x = (x1, x2, x3, ..., xn, 1)</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> np.dot(np.c_[np.ones(x.shape[<span class="number">0</span>]), x], self.theta.T)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_cost</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 计算损失</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.cost = <span class="number">0.5</span> * np.mean((self.linear_hypo(x) - y) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_grad</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 计算梯度</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.grad = np.dot((self.linear_hypo(x) - y).T, np.c_[np.ones(x.shape[<span class="number">0</span>]), x])</span><br><span class="line">        self.grad = self.grad / x.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(self.grad)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_grad_desc</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 用梯度下降法来进行优化</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.linear_cost(self.X_train, self.Y_train)</span><br><span class="line">        cost_change = <span class="number">1.0</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> cost_change &gt; self.threshold <span class="keyword">and</span> i &lt; self.epochs:</span><br><span class="line">            pre_cost = self.cost</span><br><span class="line">            <span class="comment"># 沿着梯度的方向更新参数theta的值</span></span><br><span class="line">            self.linear_grad(self.X_train, self.Y_train)</span><br><span class="line">            self.theta = self.theta - self.learning_rate*self.grad</span><br><span class="line">            self.linear_cost(self.X_train, self.Y_train)</span><br><span class="line">            cost_change = abs(pre_cost - self.cost)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 每100次输出一次loss大小</span></span><br><span class="line">                print(<span class="string">"-------%d ---- loss = %f"</span> %(i ,self.cost))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: emm, sklearn里面的fit函数 </span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.linear_grad_desc()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        @description: 预测</span></span><br><span class="line"><span class="string">        @param &#123;type&#125; </span></span><br><span class="line"><span class="string">        @return: </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># print(self.theta)</span></span><br><span class="line">        y_pre = self.linear_hypo(x)</span><br><span class="line">        <span class="keyword">return</span> y_pre</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_line</span><span class="params">(x, y, y_hat, line_color=<span class="string">"blue"</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    通用函数，用来绘图</span></span><br><span class="line"><span class="string">    plot outputs</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    plt.scatter(x, y,  color=<span class="string">'black'</span>)</span><br><span class="line">    plt.plot(x, y_hat, color=line_color, linewidth=<span class="number">3</span>)</span><br><span class="line">    plt.xticks(())</span><br><span class="line">    plt.yticks(())</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># test</span></span><br><span class="line">    <span class="comment"># 加载sklean中自带的数据集</span></span><br><span class="line">    dataset = datasets.load_diabetes()</span><br><span class="line">    <span class="comment"># 选择维度</span></span><br><span class="line">    X = dataset.data[:, <span class="number">2</span>]</span><br><span class="line">    Y = dataset.target</span><br><span class="line">    <span class="comment"># 切分数据集为训练集和测试集</span></span><br><span class="line">    X_train = X[:<span class="number">-50</span>, <span class="literal">None</span>]</span><br><span class="line">    Y_train = Y[:<span class="number">-50</span>, <span class="literal">None</span>]</span><br><span class="line">    X_test = X[<span class="number">-50</span>:, <span class="literal">None</span>]</span><br><span class="line">    Y_test = Y[<span class="number">-50</span>:, <span class="literal">None</span>]</span><br><span class="line">    </span><br><span class="line">    lr = LinearRegression(X_train, Y_train)</span><br><span class="line">    lr.fit()</span><br><span class="line">    y_pre = lr.predict(X_test)</span><br><span class="line">    plot_line(X_test, Y_test, y_pre)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hypothesis&quot;&gt;&lt;a href=&quot;#Hypothesis&quot; class=&quot;headerlink&quot; title=&quot;Hypothesis&quot;&gt;&lt;/a&gt;Hypothesis&lt;/h1&gt;&lt;p&gt;$$&lt;br&gt;h_\omega(x)=\omega x+b&lt;br&gt;$$&lt;/p&gt;
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Python拉勾职位信息数据分析</title>
    <link href="http://yoursite.com/2019/07/20/dataAnalyze-lagou/"/>
    <id>http://yoursite.com/2019/07/20/dataAnalyze-lagou/</id>
    <published>2019-07-20T03:06:27.000Z</published>
    <updated>2019-08-02T11:52:49.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇基于上一篇<a href="https://bryce.ink/2019/07/30/spider-lagou/" target="_blank" rel="noopener">python爬取拉勾职位信息</a>文章中爬取到的拉勾的职位信息进行数据清洗，最后进行数据可视化分析</p></blockquote><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>爬取数据只是第一步，真正的需求是对数据进行分析，得到我们想要的信息。在本次任务中，我想获取到<strong>成都</strong>的<strong>机器学习算法</strong>岗位的相关的分析：</p><ul><li>薪资的分布情况</li><li>薪资与区域分布</li><li>薪资与学历关系</li><li>薪资与工作年限关系</li><li>提供岗位的吸睛点</li><li>岗位的共性要求</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>从上篇的获取到的数据来看，数据中存在影响本次分析的成分：</p><ul><li>实习岗位，薪资明显和正式岗位差距很大，不符合我的需求  </li><li>岗位薪资为区间，不便于进行数据分析展示</li><li>工作年限有数字区间、应届生、不限等不统一格式</li><li>其他数字字符混合的数据</li><li>岗位要求数据格式混乱，标号不统一</li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>针对以上问题，先进行数据清洗：</p><ul><li>删除实习岗位</li><li>薪资取区间的前25%，比较符合实际，也便于进行数据分析</li><li>工作年限取区间中值，应届生、不限和其他均取0值</li><li>规模取区间中值</li><li>数据分析的时候对岗位要求删除标号、空格等特殊字符</li></ul><h1 id="代码实现与结果"><a href="#代码实现与结果" class="headerlink" title="代码实现与结果"></a>代码实现与结果</h1><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">"机器学习算法_成都.csv"</span></span><br><span class="line">data = pd.read_csv(file_name)</span><br></pre></td></tr></table></figure><ul><li>删除实习岗位</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.drop(data[data[<span class="string">"职位"</span>].str.contains(<span class="string">"实习"</span>)].index, inplace=<span class="literal">True</span>)  <span class="comment"># 删除实习岗位</span></span><br></pre></td></tr></table></figure><ul><li>工资数据清洗：先把string类型转为数字类型，再取区间的前25%为当前职位的薪资</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">reg_num = <span class="string">'\d+'</span>  <span class="comment"># 匹配数字正则表达式</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">'薪资'</span>] = data[<span class="string">'薪资'</span>].str.findall(reg_num)  <span class="comment"># 过滤只剩数字（str类型的数字）</span></span><br><span class="line">average_salary = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">'薪资'</span>]:</span><br><span class="line">    salary_list = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> i]  <span class="comment"># 转为int类型，并存入list</span></span><br><span class="line">    average = salary_list[<span class="number">0</span>] + <span class="number">0.24</span> * (salary_list[<span class="number">1</span>] - salary_list[<span class="number">0</span>])</span><br><span class="line">    average_salary.append(average)</span><br><span class="line">data[<span class="string">'薪资'</span>] = average_salary</span><br></pre></td></tr></table></figure><ul><li>工作年限数据清洗：有数字的取中间值，应届或者不限以及其他的取0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'工作年限'</span>] = data[<span class="string">'工作年限'</span>].str.findall(reg_num)</span><br><span class="line">average_exp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">'工作年限'</span>]:</span><br><span class="line">    <span class="keyword">if</span> len(i) == <span class="number">0</span>:</span><br><span class="line">        average_exp.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(i) == <span class="number">1</span>:</span><br><span class="line">        average_exp.append(int(<span class="string">""</span>.join(i)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exp_list = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line">        average_exp.append((exp_list[<span class="number">0</span>]+exp_list[<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">data[<span class="string">'工作年限'</span>] = average_exp</span><br></pre></td></tr></table></figure><ul><li>规模数据清洗：有数字的取中间值，没有数字的统一”50”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'规模'</span>] = data[<span class="string">'规模'</span>].str.findall(reg_num)</span><br><span class="line">average_scale = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">'规模'</span>]:</span><br><span class="line">    <span class="keyword">if</span> len(i) == <span class="number">0</span>:</span><br><span class="line">        average_scale.append(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(i) == <span class="number">1</span>:</span><br><span class="line">        average_scale.append(int(<span class="string">""</span>.join(i)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        scale_list = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line">        average_scale.append((scale_list[<span class="number">0</span>]+scale_list[<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">data[<span class="string">'规模'</span>] = average_scale</span><br><span class="line"></span><br><span class="line">file2_name = <span class="string">"机器学习算法_成都_清洗后.csv"</span></span><br><span class="line">data.to_csv(file2_name)</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><img src="/assets/blogimg/spider/dataanalyize_lagou_1.png"><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><ul><li>定义词云分析并展示，将结果保存至图片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordcloud_analyze_show</span><span class="params">(data, output_name)</span>:</span></span><br><span class="line">    words = jieba.cut(data, cut_all=<span class="literal">True</span>)</span><br><span class="line">    words = <span class="string">" "</span>.join(words)</span><br><span class="line">    wc = WordCloud(font_path=<span class="string">"simhei.ttf"</span>, collocations=<span class="literal">False</span>, width=<span class="number">1024</span>, height=<span class="number">768</span>, max_words=<span class="number">100</span>)</span><br><span class="line">    result = wc.generate(words)</span><br><span class="line">    plt.imshow(result)</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    wc.to_file(output_name+<span class="string">".png"</span>)</span><br></pre></td></tr></table></figure><ul><li>读取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">"机器学习算法_成都_清洗后"</span></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(file_name + <span class="string">".csv"</span>)</span><br></pre></td></tr></table></figure><ul><li>对“岗位要求”列的数据进行数据整合和清洗，再进行词云分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设定输出图形的大小</span></span><br><span class="line">plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">15</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">position_detail = data[<span class="string">'岗位职责和要求'</span>]</span><br><span class="line">position_detail_text = <span class="string">""</span>.join(position_detail)</span><br><span class="line">position_detail_text = position_detail_text.replace(<span class="string">"职位描述"</span>, <span class="string">""</span>).replace(<span class="string">"任职要求"</span>, <span class="string">""</span>).replace(</span><br><span class="line">    <span class="string">":"</span>, <span class="string">""</span>).replace(<span class="string">"岗位职责"</span>, <span class="string">""</span>).replace(<span class="string">"："</span>, <span class="string">""</span>).replace(<span class="string">" "</span>, <span class="string">""</span>).replace(<span class="string">"、"</span>, <span class="string">""</span>).replace(<span class="string">"."</span>, <span class="string">""</span>).replace(<span class="string">"·"</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    position_detail_text = position_detail_text.replace(str(i), <span class="string">""</span>)</span><br><span class="line">    </span><br><span class="line">wordcloud_analyze_show(position_detail_text, <span class="string">"岗位职责和要求"</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/blogimg/spider/output_7_0.png" alt="岗位职责和要求"></p><ul><li>对“职位诱惑”列的数据进行词云分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">advantages = <span class="string">" "</span>.join(data[<span class="string">"职位诱惑"</span>])</span><br><span class="line">wordcloud_analyze_show(advantages, <span class="string">"职位诱惑"</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/blogimg/spider/output_9_0.png" alt="职位诱惑"></p><ul><li>对薪资进行统计分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设定输出图形的大小</span></span><br><span class="line">plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">15</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">sns.set(font=<span class="string">'SimHei'</span>, style=<span class="string">"white"</span>, palette=<span class="string">"pastel"</span>, color_codes=<span class="literal">True</span>)</span><br><span class="line">sns.distplot(data[<span class="string">"薪资"</span>])</span><br><span class="line">sns.despine(left=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/blogimg/spider/output_11_0.png" alt="薪资"></p><ul><li>将“学历”和薪资联合进行关联分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x=<span class="string">"学历"</span>, y=<span class="string">"薪资"</span>, data=data)</span><br><span class="line">sns.despine(left=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/blogimg/spider/output_13_0.png" alt="学历与薪资"></p><ul><li>将“区域”和薪资联合进行关联分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x=<span class="string">"区域"</span>, y=<span class="string">"薪资"</span>, data=data)</span><br><span class="line">sns.despine(left=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/blogimg/spider/output_15_0.png" alt="区域与薪资"></p><ul><li>将“工作年限”和薪资联合进行关联分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.stripplot(x=<span class="string">"工作年限"</span>, y=<span class="string">"薪资"</span>, data=data)</span><br><span class="line">sns.despine(left=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/blogimg/spider/output_17_0.png" alt="工作年限与薪资"></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="数据清洗-1"><a href="#数据清洗-1" class="headerlink" title="数据清洗"></a>数据清洗</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    file_name = <span class="string">"机器学习算法_成都.csv"</span></span><br><span class="line">    data = pd.read_csv(file_name)</span><br><span class="line">    data.drop(data[data[<span class="string">"职位"</span>].str.contains(<span class="string">"实习"</span>)].index, inplace=<span class="literal">True</span>)  <span class="comment"># 删除实习岗位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 工资数据清洗</span></span><br><span class="line">    reg_num = <span class="string">'\d+'</span>  <span class="comment"># 匹配数字正则表达式</span></span><br><span class="line">    data[<span class="string">'薪资'</span>] = data[<span class="string">'薪资'</span>].str.findall(reg_num)  <span class="comment"># 过滤只剩数字（str类型的数字）</span></span><br><span class="line">    average_salary = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">'薪资'</span>]:</span><br><span class="line">        salary_list = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> i]  <span class="comment"># 转为int类型，并存入list</span></span><br><span class="line">        average = salary_list[<span class="number">0</span>] + <span class="number">0.24</span> * (salary_list[<span class="number">1</span>] - salary_list[<span class="number">0</span>])</span><br><span class="line">        average_salary.append(average)</span><br><span class="line">    data[<span class="string">'薪资'</span>] = average_salary</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 工作年限数据清洗</span></span><br><span class="line">    data[<span class="string">'工作年限'</span>] = data[<span class="string">'工作年限'</span>].str.findall(reg_num)</span><br><span class="line">    average_exp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">'工作年限'</span>]:</span><br><span class="line">        <span class="keyword">if</span> len(i) == <span class="number">0</span>:</span><br><span class="line">            average_exp.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(i) == <span class="number">1</span>:</span><br><span class="line">            average_exp.append(int(<span class="string">""</span>.join(i)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exp_list = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line">            average_exp.append((exp_list[<span class="number">0</span>]+exp_list[<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">    data[<span class="string">'工作年限'</span>] = average_exp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 规模数据清洗</span></span><br><span class="line">    data[<span class="string">'规模'</span>] = data[<span class="string">'规模'</span>].str.findall(reg_num)</span><br><span class="line">    average_scale = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">'规模'</span>]:</span><br><span class="line">        <span class="keyword">if</span> len(i) == <span class="number">0</span>:</span><br><span class="line">            average_scale.append(<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">elif</span> len(i) == <span class="number">1</span>:</span><br><span class="line">            average_scale.append(int(<span class="string">""</span>.join(i)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            scale_list = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line">            average_scale.append((scale_list[<span class="number">0</span>]+scale_list[<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">    data[<span class="string">'规模'</span>] = average_scale</span><br><span class="line"></span><br><span class="line">    file2_name = <span class="string">"机器学习算法_成都_清洗后.csv"</span></span><br><span class="line">    data.to_csv(file2_name)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="数据分析-1"><a href="#数据分析-1" class="headerlink" title="数据分析"></a>数据分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordcloud_analyze_show</span><span class="params">(data, output_name)</span>:</span></span><br><span class="line">    words = jieba.cut(data, cut_all=<span class="literal">True</span>)</span><br><span class="line">    words = <span class="string">" "</span>.join(words)</span><br><span class="line">    wc = WordCloud(font_path=<span class="string">"simhei.ttf"</span>, collocations=<span class="literal">False</span>, width=<span class="number">1024</span>, height=<span class="number">768</span>, max_words=<span class="number">100</span>)</span><br><span class="line">    result = wc.generate(words)</span><br><span class="line">    plt.imshow(result)</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    wc.to_file(output_name+<span class="string">".png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    file_name = <span class="string">"机器学习算法_成都_清洗后"</span></span><br><span class="line">    data = pd.read_csv(file_name + <span class="string">".csv"</span>)</span><br><span class="line">    <span class="comment"># 设定输出图形的大小</span></span><br><span class="line">    plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">15</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    position_detail = data[<span class="string">'岗位职责和要求'</span>]</span><br><span class="line">    position_detail_text = <span class="string">""</span>.join(position_detail)</span><br><span class="line">    position_detail_text = position_detail_text.replace(<span class="string">"职位描述"</span>, <span class="string">""</span>).replace(<span class="string">"任职要求"</span>, <span class="string">""</span>)     .replace(<span class="string">":"</span>, <span class="string">""</span>).replace(<span class="string">"岗位职责"</span>, <span class="string">""</span>).replace(<span class="string">"："</span>, <span class="string">""</span>).replace(<span class="string">" "</span>, <span class="string">""</span>).replace(<span class="string">"、"</span>,    <span class="string">""</span>).replace(<span class="string">"."</span>, <span class="string">""</span>).replace(<span class="string">"·"</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        position_detail_text = position_detail_text.replace(str(i), <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出岗位职责和要求的词云图</span></span><br><span class="line">    wordcloud_analyze_show(position_detail_text, <span class="string">"岗位职责和要求"</span>)</span><br><span class="line">    <span class="comment"># 输出岗位职责和要求的词云图</span></span><br><span class="line">    advantages = <span class="string">" "</span>.join(data[<span class="string">"职位诱惑"</span>])</span><br><span class="line">    wordcloud_analyze_show(advantages, <span class="string">"职位诱惑"</span>)</span><br><span class="line">    <span class="comment"># 设定输出图形的大小</span></span><br><span class="line">    plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">15</span>, <span class="number">8</span>)</span><br><span class="line">    <span class="comment"># 对薪资进行统计分析</span></span><br><span class="line">    sns.set(font=<span class="string">'SimHei'</span>, style=<span class="string">"white"</span>, palette=<span class="string">"pastel"</span>, color_codes=<span class="literal">True</span>)</span><br><span class="line">    sns.distplot(data[<span class="string">"薪资"</span>])</span><br><span class="line">    sns.despine(left=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 将“学历”和薪资联合进行关联分析</span></span><br><span class="line">    sns.stripplot(x=<span class="string">"学历"</span>, y=<span class="string">"薪资"</span>, data=data)</span><br><span class="line">    sns.despine(left=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 将“区域”和薪资联合进行关联分析</span></span><br><span class="line">    sns.stripplot(x=<span class="string">"区域"</span>, y=<span class="string">"薪资"</span>, data=data)</span><br><span class="line">    sns.despine(left=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 将“工作年限”和薪资联合进行关联分析</span></span><br><span class="line">    sns.stripplot(x=<span class="string">"工作年限"</span>, y=<span class="string">"薪资"</span>, data=data)</span><br><span class="line">    sns.despine(left=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇基于上一篇&lt;a href=&quot;https://bryce.ink/2019/07/30/spider-lagou/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python爬取拉勾职位信息&lt;/a&gt;文章中爬取到的拉勾的职位信息进
      
    
    </summary>
    
      <category term="数据分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取拉勾职位信息</title>
    <link href="http://yoursite.com/2019/07/15/spider-lagou/"/>
    <id>http://yoursite.com/2019/07/15/spider-lagou/</id>
    <published>2019-07-15T04:25:57.000Z</published>
    <updated>2019-08-02T11:52:32.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>  爬取拉勾网<strong>成都</strong>地区<strong>机器学习算法</strong>岗位的相关信息，为后期数据分析、词云展示做数据准备</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>网上某些基于json数据直接下载的方法已经失效，拉勾采取了比较多的反爬机制  </li><li>连续请求10次职位详情，就会弹出登录页面。不管直接发请求还是人为点击，均触发该机制  </li><li>请求过快也会弹出登录页面，需要模拟人为操作的时间间隔  </li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li>不直接基于json数据进行爬取，采用selenium调用浏览器driver，模拟真实用户使用浏览器进行访问爬取  </li><li>连续10次请求后，重启浏览器，继续爬取，避免登录。从而实现免登陆爬取数据  </li><li>在所有请求操作中，均设置sleep间隔时间，避免请求过快弹出登录页面</li><li>实现中需调用chrome浏览器，<strong>需要把对应版本的chromedriver.exe放入到工作目录中</strong></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>本项目主要使用的model： </p><ul><li>webdriver ：用于自动启动浏览器，并进行有关操作</li><li>lxml ：进行网页解析  </li><li>random ：生成随机数，用于在一定范围内sleep</li><li>time ：用于sleep</li><li>pandas ：用于数据存储和处理</li></ul><blockquote><p>完整代码如下，代码注释个人觉得比较详细了，就不做代码解读</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, keyword, city)</span>:</span></span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.keyword = keyword</span><br><span class="line">        self.city = city</span><br><span class="line">        self.url = <span class="string">"https://www.lagou.com/jobs/list_"</span> + self.keyword + <span class="string">"?px=default&amp;city="</span> + self.city + <span class="string">"#filterBox"</span></span><br><span class="line">        self.all_links = []</span><br><span class="line">        <span class="comment"># 特性</span></span><br><span class="line">        self.company_name = []  <span class="comment"># 公司名</span></span><br><span class="line">        self.company_domain = []  <span class="comment"># 领域</span></span><br><span class="line">        self.company_scale = []  <span class="comment"># 规模</span></span><br><span class="line">        self.company_financing = []  <span class="comment"># 融资</span></span><br><span class="line">        self.position_address = []  <span class="comment"># 区域</span></span><br><span class="line"></span><br><span class="line">        self.position_name = []  <span class="comment"># 职位名称</span></span><br><span class="line">        self.salary = []  <span class="comment"># 薪资</span></span><br><span class="line"><span class="comment">#         self.city = []</span></span><br><span class="line">        self.work_year = []  <span class="comment"># 工作年限</span></span><br><span class="line">        self.education = []  <span class="comment"># 学历</span></span><br><span class="line">        self.advantage = []  <span class="comment"># 职位诱惑</span></span><br><span class="line">        self.bt_detail = []  <span class="comment"># 岗位职责和要求</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restart_brower</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.close()</span><br><span class="line">        self.driver.quit()</span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_detail_times</span><span class="params">(self, ten_links)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        鉴于问题2，这里每次对10个职位详情进行遍历请求，保存数据后，然后关闭浏览器</span></span><br><span class="line"><span class="string">        鉴于问题3，每次对1个职位详情请求后，sleep几秒</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> ten_links:</span><br><span class="line">            self.get_detail_page(link)    <span class="comment"># 获取每一个链接中的详细信息</span></span><br><span class="line">            print(link + <span class="string">'...done\n'</span>)</span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_detail_links</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据url获取all links</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.driver.get(self.url)</span><br><span class="line">        page_num = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            source = self.driver.page_source</span><br><span class="line">            html = etree.HTML(source)</span><br><span class="line">            links = html.xpath(<span class="string">'//a[@class="position_link"]/@href'</span>)</span><br><span class="line">            self.all_links += links  <span class="comment"># 获取的links存放在self.all_links中</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                next_btn = self.driver.find_element_by_xpath(</span><br><span class="line">                    <span class="string">'//div[@class="pager_container"]/span[last()]'</span>)</span><br><span class="line">                <span class="keyword">if</span> next_btn == <span class="literal">None</span> <span class="keyword">or</span> <span class="string">"pager_next_disabled"</span> <span class="keyword">in</span> next_btn.get_attribute(<span class="string">"class"</span>) <span class="keyword">or</span> page_num &gt;= <span class="number">10</span>:</span><br><span class="line">                    <span class="comment"># 不存在下一页按钮或者下一页不可用，则退出浏览器</span></span><br><span class="line">                    <span class="comment">#                    self.driver.close()</span></span><br><span class="line">                    <span class="keyword">return</span> list(set(self.all_links))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 下一页可用，则点击下一页</span></span><br><span class="line">                    next_btn.click()</span><br><span class="line">                    page_num += <span class="number">1</span></span><br><span class="line">                    time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> list(set(self.all_links))</span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        <span class="keyword">return</span> self.all_links</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_detail_page</span><span class="params">(self, link)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        获取link中的详细职位描述等信息，并保存</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        print(link)</span><br><span class="line">        self.driver.get(link)</span><br><span class="line">        source = self.driver.page_source</span><br><span class="line">        <span class="comment"># 解析页面</span></span><br><span class="line">        html = etree.HTML(source)</span><br><span class="line">        <span class="comment"># 获取职位名称</span></span><br><span class="line">        position_name = html.xpath(</span><br><span class="line">            <span class="string">'//div[@class="job-name"]/@title'</span>)[<span class="number">0</span>]  </span><br><span class="line">        self.position_name.append(position_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取职位id</span></span><br><span class="line">        position_id = html.xpath(</span><br><span class="line">            <span class="string">'//link[@rel="canonical"]/@href'</span>)[<span class="number">0</span>].split(<span class="string">'/'</span>)[<span class="number">-1</span>].replace(<span class="string">'.html'</span>, <span class="string">''</span>)  </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取薪资</span></span><br><span class="line">        job_request_spans = html.xpath(<span class="string">'//dd[@class="job_request"]//span'</span>)</span><br><span class="line">        salary = job_request_spans[<span class="number">0</span>].xpath(<span class="string">'.//text()'</span>)[<span class="number">0</span>].strip()  </span><br><span class="line">        self.salary.append(salary)</span><br><span class="line">        <span class="comment"># 获取城市</span></span><br><span class="line"><span class="comment">#         city = job_request_spans[1].xpath(</span></span><br><span class="line"><span class="comment">#             './/text()')[0].strip().replace('/', '').strip()  </span></span><br><span class="line"><span class="comment">#         self.city.append(city)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取工作年限</span></span><br><span class="line">        work_year = job_request_spans[<span class="number">2</span>].xpath(</span><br><span class="line">            <span class="string">'.//text()'</span>)[<span class="number">0</span>].strip(<span class="string">'/'</span>).strip()  </span><br><span class="line">        self.work_year.append(work_year)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取学历要求</span></span><br><span class="line">        education = job_request_spans[<span class="number">3</span>].xpath(</span><br><span class="line">            <span class="string">'.//text()'</span>)[<span class="number">0</span>].strip(<span class="string">'/'</span>).strip()  </span><br><span class="line">        self.education.append(education)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取职位诱惑</span></span><br><span class="line">        job_detail_dl = html.xpath(<span class="string">'//dl[@class="job_detail"]'</span>)[<span class="number">0</span>]</span><br><span class="line">        advantage = job_detail_dl.xpath(</span><br><span class="line">            <span class="string">'.//dd[@class="job-advantage"]//p/text()'</span>)[<span class="number">0</span>].strip(<span class="string">'/'</span>).strip().replace(<span class="string">"，"</span>, <span class="string">","</span>)  </span><br><span class="line">        self.advantage.append(advantage)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取岗位职责和要求</span></span><br><span class="line">        bt_detail = <span class="string">""</span>.join(job_detail_dl.xpath(<span class="string">'.//div[@class="job-detail"]'</span>)[<span class="number">0</span>].xpath(<span class="string">'.//text()'</span>)).strip().replace(<span class="string">" "</span>, <span class="string">""</span>).replace(<span class="string">"\n"</span>, <span class="string">""</span>)  </span><br><span class="line"><span class="comment">#         print(bt_detail)</span></span><br><span class="line">        self.bt_detail.append(bt_detail)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取区域</span></span><br><span class="line">        position_address = html.xpath(</span><br><span class="line">            <span class="string">'//div[@class="work_addr"]//a'</span>)[<span class="number">1</span>].xpath(<span class="string">'.//text()'</span>)[<span class="number">0</span>].strip()  </span><br><span class="line"></span><br><span class="line">        self.position_address.append(position_address)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取公司名称</span></span><br><span class="line">        company_name = html.xpath(</span><br><span class="line">            <span class="string">'//em[@class="fl-cn"]//text()'</span>)[<span class="number">0</span>].strip()  </span><br><span class="line"></span><br><span class="line">        self.company_name.append(company_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取领域</span></span><br><span class="line">        company = html.xpath(<span class="string">'//h4[@class="c_feature_name"]//text()'</span>)</span><br><span class="line">        company_domain = company[<span class="number">0</span>]  </span><br><span class="line">        self.company_domain.append(company_domain)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取融资</span></span><br><span class="line">        company_financing = company[<span class="number">1</span>]  </span><br><span class="line">        self.company_financing.append(company_financing)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取规模</span></span><br><span class="line">        company_scale = company[<span class="number">2</span>]  </span><br><span class="line">        self.company_scale.append(company_scale)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_csv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 退出浏览器并关闭driver</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line">        <span class="comment"># 写入csv文件中</span></span><br><span class="line">        <span class="comment"># 字典中的key值即为csv中列名</span></span><br><span class="line">        <span class="comment"># 公司、领域、融资、规模、区域、职位、薪资、工作年限、学历、职位诱惑、岗位职责和要求</span></span><br><span class="line">        dataframe = pd.DataFrame(&#123;<span class="string">'公司'</span>: self.company_name, <span class="string">'领域'</span>: self.company_domain, <span class="string">'融资'</span>: self.company_financing,</span><br><span class="line">                                  <span class="string">'规模'</span>: self.company_scale, <span class="string">'区域'</span>: self.position_address,</span><br><span class="line">                                  <span class="string">'职位'</span>: self.position_name, <span class="string">'薪资'</span>: self.salary, <span class="string">'工作年限'</span>: self.work_year,</span><br><span class="line">                                  <span class="string">'学历'</span>: self.education, <span class="string">'职位诱惑'</span>: self.advantage, <span class="string">'岗位职责和要求'</span>: self.bt_detail&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将DataFrame存储为csv,index表示是否显示行名，default=True</span></span><br><span class="line"></span><br><span class="line">        file_name = self.keyword + <span class="string">"_"</span> + self.city + <span class="string">".csv"</span></span><br><span class="line">        dataframe.to_csv(file_name, index=<span class="literal">False</span>, sep=<span class="string">','</span>)</span><br></pre></td></tr></table></figure><blockquote><p>主要功能实现已经完成，下面进行调用并保存结果到csv</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    city = <span class="string">"成都"</span></span><br><span class="line">    keyword = <span class="string">"机器学习算法"</span></span><br><span class="line">    lg = LagouSpider(keyword, city)</span><br><span class="line">    all_links = lg.get_all_detail_links()</span><br><span class="line">    all_links = [all_links[i:i+<span class="number">10</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(all_links), <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ten_links <span class="keyword">in</span> all_links:</span><br><span class="line">        lg.request_detail_times(ten_links)</span><br><span class="line">        time.sleep(random.randint(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">        lg.restart_brower()</span><br><span class="line"></span><br><span class="line">    lg.save_csv()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>抓取结果如下图：</p><img src="/assets/blogimg/spider/spider_lagou_1.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;  爬取拉勾网&lt;strong&gt;成都&lt;/strong&gt;地区&lt;strong&gt;机器学习算法&lt;/strong&gt;岗位的相关信息，为后期数据分析、词云展
      
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>一波太多折</title>
    <link href="http://yoursite.com/2017/10/09/30/"/>
    <id>http://yoursite.com/2017/10/09/30/</id>
    <published>2017-10-09T14:44:40.000Z</published>
    <updated>2019-07-29T01:28:41.435Z</updated>
    
    <content type="html"><![CDATA[<img src="/assets/blogimg/notes/notes-3.jpg" width="50%"><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>10月7日下午4点58分，十堰到武汉动车。10月8日凌晨6点多武汉到广州的票（虽然后来换票了）。<br>10月7日、10月8日，十堰到武汉的车都无票。</p><a id="more"></a><blockquote><p>关于时间节点，描述精确的要么是我看过表，要么是电话记录，要么是滴滴订单。不确定的，描述中会使用x分左右。</p></blockquote><h3 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h3><p>10月7日中午参加完婚礼，时间1点50，一行四个人闲来无事，买了4张票去看羞羞的铁拳，2点10分到3点50多。<br>看完出来上厕所等电梯拿行李等，到马路边叫了滴滴等，此时4点15分，动车开车时间是4点58分。<br>此时找身份证准备待会儿取票用的时候才发现钱包不见了。赶紧翻包翻箱子，没有找到。</p><p>4点17分左右，滴滴来了，让另外俩小伙伴先走，我和妹子再找找。他们走后，我直接跑到结婚酒店的前台问，告知婚礼的负责在4楼前台，迈着刚爬了青城山和武当山两座大山的酸腿飞奔上四楼，告知没有人捡到，让我自己去5楼大厅看看，此时已经明白基本无望了，还是飞奔而去，果然都收拾干净了，再飞奔下一楼。<br>看时间4点21了。来不及了，错过了这趟车，今天就没有车回武汉，明天也就回不了深圳，明天也没有车去武汉的。。决定先去火车站看能不能搞到临时证明，先去武汉再说。</p><p>4点23分，滴滴接单。</p><p>4点24分，司机打来电话。</p><p>4点27分，上车。</p><p>4点45分，快到车站的时候，堵车，和妹子商量，我先去跑过去搞证明，取票。</p><p>4点46分，拿了她的身份证下车狂奔。此时离开车还有12分，一切顺利就还来得及，只能这么安慰自己。</p><p>你以为老天的考验就这样了？太单纯了。我当时也是。太单纯了。</p><p>4点59分左右，到达人工售票窗口，问清了哪里办临时证件，跑过去，有人在办，窃喜，再一问，告知需要一张照片。WTF，这什么卵规定，我TM现在去哪里弄，工作人员一指，马路对面，我一看时间，4点50了，马路对面？你逗我？目测一里多路，还得找照相馆，还得照，还得洗出来，这怎么可能来得及？感觉世界已经崩塌，自己是走不了了，赶紧去自动取票机帮妹子取了票，等她来了让她先走，能走一个是一个。</p><p>4点51分，妹子一个人拖着箱子，背着一个包，提着包，走过来了，看我在这里等，估计以为都搞好了，结果我拿出一张票给她，你先走，我是走不了了。她愣了一下，也急了，最后问清楚了，说再去说了看看，我说我说过了，不让，必须要照片。<br>最后，4点52分，又去了窗口，这次我们一起说，更显急迫，工作人员 终于答应了，内心狂喜。以为运气来了，结果发现自己还是太单纯。</p><p>4点53分，办好了临时证明，让妹子带着行李先进站了，因为订单号在她手机上，无证取票要订单号，于是我拿着她的手机狂奔去人工取票。三个窗口开着，直接去第一个，插队问，回答她这里办不了，去另一个。到另一个，正在办理，问了两遍不理我。我去第三个，办不了，只能第二个。又跑去第二个，再问，还是不回答，看着她不忙不急的办理，不经历的很难理解当时是一种是心情。</p><p>4点55分，还没办完，忍不住了，再次问能不能先帮我搞下，我58分车。“我搞了半天。总不能取消掉吧，你等着！”我当时竟然笑了。然后看着她又点了会儿，拿出4个身份证一个一个刷，一个一个出票，后面人都看着我，眼里满是同情。第一个买票的大爷，也有点不好意思，抬头看了看我，又看了看售票员，最后低头没说话。我笑着摇了摇头。</p><p>4点57分，到我了，本来已经绝望了，但是票还是得取，20秒取票走人，不忘说一句谢谢。</p><p>再晚一分钟，票过了58分就取不出来了。</p><p>这时候，其实我已经可以放弃了。因为按照常理已经停止检票，就算让你进去了，也只能看着车走了。</p><p>但是我还是疯狂的跑进去了，虽然内心真真正正的已经绝望。</p><p>安检，因为没有行李，所以很快</p><p>4点58到检票处，看到妹子在检票口叫我赶紧，愣了一下，边想着怎么还没停止检票，边飞奔过去。</p><p>检票进去后，看到了之前的俩小伙伴，很是惊讶，一问，他们都说，我运气好，动车起点站晚点的，第一次遇到。不然，我这肯定是赶不上了。</p><p>我这运气，到底是好，还是不好。一言难尽。</p><p>进去后，才发现本来已经酸疼的腿，这一路上竟然一点感觉都没有，直到在车上坐下来才瑟瑟发抖。。。</p><blockquote><p>什么？损失？钱不多，就几十块人民币加几十块港币，记起来200不到。但是身份证，4张银行卡，1张社保卡。。。后续会有多麻烦。</p></blockquote><blockquote><p>教训：以后还是得放些钱在钱包，只有钱包有钱了，平常才会记得时时看看，才会重视。不然，这次没钱，连什么时候掉的都想不起来。。</p></blockquote><br><p>所以啊，人生呢<br>不迈出第一步，你永远不知道下一步在哪里。<br>不走到最后一步，你永远不知道结局是什么。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/assets/blogimg/notes/notes-3.jpg&quot; width=&quot;50%&quot;&gt;

&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;10月7日下午4点58分，十堰到武汉动车。10月8日凌晨6点多武汉到广州的票（虽然后来换票了）。&lt;br&gt;10月7日、10月8日，十堰到武汉的车都无票。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="经历" scheme="http://yoursite.com/tags/%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>Redos攻击原理与检测防御</title>
    <link href="http://yoursite.com/2017/09/13/redos/"/>
    <id>http://yoursite.com/2017/09/13/redos/</id>
    <published>2017-09-13T14:38:40.000Z</published>
    <updated>2019-07-29T10:06:36.425Z</updated>
    
    <content type="html"><![CDATA[<!-- <img src="/assets/blogimg/notes/notes-3.jpg" width = "50%" /> --><p><strong>Regular expression Denial of Service (ReDoS)是一种利用程序实现时采用了不安全的正则表达式，从而构造特定输入引起DOS拒绝服务的一种攻击手段。</strong></p><p>在正式讨论ReDos之前，先来介绍一下预备知识。</p><h2 id="Regex与DFA、NFA"><a href="#Regex与DFA、NFA" class="headerlink" title="Regex与DFA、NFA"></a>Regex与DFA、NFA</h2><blockquote><p>不想看原理可以直接跳过去看例子，部分人可秒懂</p></blockquote><p>正则表达式，又称规则表达式，英文名为Regular Expression，在代码中常简写为regex、regexp或RE，是计算机科学的一个概念。</p><p>正则表通常被用来检索、替换那些符合某个模式(规则)的文本。</p><p>正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><p>正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。</p><p>DFA 引擎在线性时状态下执行，因为它们不要求回溯（并因此它们永远不测试相同的字符两次）。<br>DFA 引擎还可以确保匹配最长的可能的字符串。<br>但是，因为 DFA 引擎只包含有限的状态，所以它不能匹配具有反向引用的模式；并且因为它不构造显示扩展，所以它不可以捕获子表达式。</p><a id="more"></a><p>传统的 NFA 引擎运行所谓的“贪婪的”匹配回溯算法，以指定顺序测试正则表达式的所有可能的扩展并接受第一个匹配项。<br>因为传统的 NFA 构造正则表达式的特定扩展以获得成功的匹配，所以它可以捕获子表达式匹配和匹配的反向引用。<br>但是，因为传统的 NFA 回溯，所以它可以访问完全相同的状态多次（如果通过不同的路径到达该状态）。<br>因此，在最坏情况下，它的执行速度可能非常慢。因为传统的 NFA 接受它找到的第一个匹配，所以它还可能会导致其他（可能更长）匹配未被发现。</p><p>POSIX NFA 引擎与传统的 NFA 引擎类似。<br>不同的一点在于：在它们可以确保已找到了可能的最长的匹配之前，它们将继续回溯。<br>因此，POSIX NFA 引擎的速度慢于传统的 NFA 引擎；并且在使用 POSIX NFA 时，您恐怕不会愿意在更改回溯搜索的顺序的情况下来支持较短的匹配搜索，而非较长的匹配搜索。</p><ul><li>使用DFA引擎的程序主要有：awk,egrep,flex,lex,MySQL,Procmail等；</li><li>使用传统型NFA引擎的程序主要有：GNU Emacs,Java,ergp,less,more,.NET语言,PCRE library,Perl,PHP,Python,Ruby,sed,vi；</li><li>使用POSIX NFA引擎的程序主要有：mawk,Mortice Kern Systems’ utilities,GNU Emacs(使用时可以明确指定)；</li><li>也有使用DFA/NFA混合的引擎：GNU awk,GNU grep/egrep,Tcl。</li></ul><p><strong>下面用实例来说明正则匹配时，NFA与DFA引擎的区别：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串： hello regextest</span><br><span class="line">正则表达式：  \reg(axtest|extext|extest)</span><br></pre></td></tr></table></figure><p><code>DFA</code>：拿着字符串文本去匹配正则表达式。<br>hello没有正则匹配的，去掉，reg匹配上了，继续；exte和第二、三分支匹配，继续；st和第三分支匹配，至此，regextest匹配成功，结束。过程中字符串只遍历了一次。</p><p><code>NFA</code>：拿着正则表达式去对比字符串文本。<br>r-&gt;淘汰hello，匹配到r，e-&gt;e，g-&gt;g，a-&gt;e失败，回溯到上一个匹配的g，匹配下一个正则，e-&gt;e，x-&gt;x，t-&gt;t，e-&gt;e，x-&gt;s失败，回溯到上一个匹配的e，匹配下一个正则，s-&gt;s，t-&gt;t，匹配成功，结束。过程中字符串遍历了多次。</p><h3 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h3><p><strong>DOS攻击</strong>这里引用段子嘎的介绍：<br>DoS（Denial of Service，拒绝服务）是一种网络攻击手段，通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。<br>形象一点的比喻是，你开了一家小面馆，黑客派了几个广场的大爷大妈涌入你的店里坐着吹空调，也不消费就霸着场子，导致其他顾客根本无法进店消费。<br>想详细了解可自行去查资料。</p><br><h2 id="下面开始介绍本文重点：ReDos"><a href="#下面开始介绍本文重点：ReDos" class="headerlink" title="下面开始介绍本文重点：ReDos"></a>下面开始介绍本文重点：ReDos</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>本文主要介绍使用NFA引擎的程序语言，使用DFA引擎的程序不存在ReDos。因为NFA引擎的回溯机制，导致了当字符串文本与正则表达式不匹配时，所花费的时间要比匹配时长的多。<br>简单点说，确定匹配成功就不做了，但是要确定匹配失败，则需要与所有可能的路径进行对比匹配，都证明匹配不了，才能确定匹配失败。</p><p>此时，如果使用简单的非分组正则表达式来进行匹配，也不会引起问题，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+$</span><br></pre></td></tr></table></figure><ul><li><p>1）23x<br>23,<code>x</code>　　2,<code>3x</code>    　　<code>23x</code><br>标粗部分为确认不匹配的部分，第一次遇到不匹配时回溯到上一个继续进行匹配，共<code>3</code>次</p></li><li><p>2）123x<br>123,<code>x</code>　　12,<code>3x</code>　　1,<code>23x</code>　　<code>123x</code><br>标粗部分为确认不匹配的部分，第一次遇到不匹配时回溯到上一个继续进行匹配，共<code>4</code>次</p></li></ul><p>此时呈<code>线性</code>增长。</p><p>但是，如果使用重复性分组正则表达式来进行匹配，则可能引起问题，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\(d+)+$</span><br></pre></td></tr></table></figure><ul><li><p>1）23x<br>23,<code>x</code>　　2,3,<code>x</code>　　2,<code>3x</code>    　　<code>23x</code><br>标粗部分为确认不匹配的部分，迭代多次才能确认原字符串不匹配，总共需要<code>2^2 = 4</code>次</p></li><li><p>2）123x<br>123,<code>x</code>　　12,3,<code>x</code>　　12,<code>3x</code>　　1,23,<code>x</code>　　1,2,3,<code>x</code>　　1,2,<code>3x</code>　　1,<code>23x</code>　　<code>123x</code><br>标粗部分为确认不匹配的部分，迭代多次才能确认原字符串不匹配，总共需要<code>2^3 = 8</code>次</p></li></ul><p>此时呈<code>指数</code>增长。</p><br><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">strs = (</span><br><span class="line">    <span class="string">'1234567890x'</span>,</span><br><span class="line">    <span class="string">'12345678901234567890x'</span>,</span><br><span class="line">    <span class="string">'1234567890123456789012345x'</span>,</span><br><span class="line">    <span class="string">'12345678901234567890123456x'</span>,</span><br><span class="line">    <span class="string">'123456789012345678901234567x'</span>,</span><br><span class="line">    <span class="string">'1234567890123456789012345678x'</span>,</span><br><span class="line">    <span class="string">'12345678901234567890123456789x'</span></span><br><span class="line">)</span><br><span class="line">regex = <span class="string">'^(\d+)+$'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(strs, regex)</span>:</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    result = re.compile(regex).match(strs)</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    print(<span class="string">"%s : %s : %.2f"</span> % (strs, str(result), (t2 - t1)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    fun(s, regex)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Python\Python36\python.exe D:/python/get_hi3ms_user_files/redos/redos.py</span><br><span class="line">1234567890x : None : 0.00</span><br><span class="line">12345678901234567890x : None : 0.09</span><br><span class="line">1234567890123456789012345x : None : 2.95</span><br><span class="line">12345678901234567890123456x : None : 5.92</span><br><span class="line">123456789012345678901234567x : None : 12.51</span><br><span class="line">1234567890123456789012345678x : None : 24.68</span><br><span class="line">12345678901234567890123456789x : None : 52.39</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>可以看出每增加一位，其运行时间呈现<strong>指数</strong>增长。</p><p>再来查看运行时的CPU占用，测试机子为4核电脑，单进程跑，CPU25%，单核占满了。<br><img src="/assets/blogimg/security/redos-1.png"></p><p>同时运行4个程序就能跑满100%CPU，可造成拒绝服务。<br><img src="/assets/blogimg/security/redos-2.png"></p><h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><p>容易引起ReDos的正则表达式主要有两类：<br>1、    包含具有自我重复的重复性分组的正则，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^(\d+)+$</span><br><span class="line">^(\d*)*$</span><br><span class="line">^(\d+)*$</span><br><span class="line">^(\d+|\s+)*$</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>2、    包含替换的重复性分组，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^(\d|\d|\d)+$</span><br><span class="line">^(\d|\d?)+$</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>目前已经在使用的，甚至是一些官方提供的正则表达式，也可能存在缺陷：</p><p>1、    <a href="（http://regexlib.com/REDetails.aspx?regexp_id=1757&AspxAutoDetectCookieSupport=1）">正则表达式库网站中，提供的专门用于验证电子邮件的正则</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^([a-zA-Z0-9])(([\-.]|[_]+)?([a-zA-Z0-9]+))*(@)&#123;1&#125;[a-z0-9]+[.]&#123;1&#125;(([a-z]&#123;2,3&#125;)|([a-z]&#123;2,3&#125;[.]&#123;1&#125;[a-z]&#123;2,3&#125;))$/</span><br></pre></td></tr></table></figure><p>输入：aaaaaaaaaaaaaaaaaaaaaaaa!</p><p>2、    <a href="https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository" target="_blank" rel="noopener">OWASP验证正则表达式库</a>，这也是一个有缺陷的正则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(([a-z])+.)+[A-Z]([a-z])+$</span><br></pre></td></tr></table></figure><p>输入：aaaaaaaaaaaaaaaaaaaaaaaa!</p><p>3、    常用的：<br>多个邮箱地址验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z]+(([\&apos;\,\.\-][a-zA-Z ])?[a-zA-Z]*)*\s+&amp;lt;(\w[-._\w]*\w@\w[-._\w]*\w\.\w&#123;2,3&#125;)&amp;gt;$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w&#123;2,3&#125;)$</span><br></pre></td></tr></table></figure><p>输入: aaaaaaaaaaaaaaaaaaaaaaaa!</p><p>复数验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d*[0-9](|.\d*[0-9]|)*$</span><br></pre></td></tr></table></figure><p>输入: 1111111111111111111111111!</p><p>模式匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?\.)&#123;0,&#125;([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?)&#123;1,63&#125;(\.[a-z0-9]&#123;2,7&#125;)+$</span><br></pre></td></tr></table></figure><p>输入: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</p><p>另外，攻击者也可能通过输入来自己构造缺陷正则，从而发起攻击：<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String userName = textBox1.Text;</span><br><span class="line">String password = textBox2.Text;</span><br><span class="line">Regex testPassword = <span class="keyword">new</span> Regex(userName);</span><br><span class="line">match match = testPassword.Match(password);</span><br></pre></td></tr></table></figure><p>此时，攻击者输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Userame：^(( [az])+.)+ [AZ]([az])+$</span><br><span class="line">Password：aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa！</span><br></pre></td></tr></table></figure><p>则会引起ReDos.</p><h3 id="风险因素"><a href="#风险因素" class="headerlink" title="风险因素"></a>风险因素</h3><img src="/assets/blogimg/security/redos-3.png"><p>在web的每一层都包含有正则表达式，也就是每一层都会存在有缺陷的正则风险。<br>攻击者能够攻击Web浏览器（PC端或者移动端）、WAF、数据库或者是Web服务器。</p><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p>其实理想的方法是在代码编译时用一个正则去查找匹配存在缺陷的正则表达式，然而搜索了一下，没有找到这种有效的正则。目前比较好的检测手段主要分两种。</p><ul><li>一是静态代码工具分析，通过抓取代码中的正则去匹配已知的存在缺陷的特征库，重点需要检测存在分组和重复的正则，这种方法的准确率主要依赖于特征库的质量。</li><li>二是通过模糊测试去程序中进行检测。在使用了正则的地方不断使用多种字符串去进行输入匹配，记录下引擎在判断是否匹配时花费的时间，时间过长则很有可能存在不安全的正则。这种方法依赖于构造的字符串是否够全面。</li></ul><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>目前主要的防御手段主要还是在程序中避免出现不安全的正则：</p><ul><li>1、    在编写正则的时候，尽量不要使用过于复杂的正则，越复杂越容易有缺陷，且越不容易进行全面的测试；</li><li>2、    编写正则的时候，尽量减少分组的使用量，使用的越多出现缺陷的可能性越大</li><li>3、    避免动态构造正则（即new Regex(…)），如果需要构造，也保证不要使用用户的输入来进行动态构造。</li><li>4、    严格限制用户输入的长度限制。</li></ul><p>服务端可以进行性能监控，暂时还没法进行有效的防御。</p><br><br><p>参考链接：<br><a href="https://msdn.microsoft.com/zh-cn/magazine/ff646973.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/magazine/ff646973.aspx</a><br><a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS" target="_blank" rel="noopener">https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS</a><br><a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin</a><br><a href="http://www.freebuf.com/articles/network/124422.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/network/124422.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;img src=&quot;/assets/blogimg/notes/notes-3.jpg&quot; width = &quot;50%&quot; /&gt; --&gt;

&lt;p&gt;&lt;strong&gt;Regular expression Denial of Service (ReDoS)是一种利用程序实现时采用了不安全的正则表达式，从而构造特定输入引起DOS拒绝服务的一种攻击手段。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在正式讨论ReDos之前，先来介绍一下预备知识。&lt;/p&gt;
&lt;h2 id=&quot;Regex与DFA、NFA&quot;&gt;&lt;a href=&quot;#Regex与DFA、NFA&quot; class=&quot;headerlink&quot; title=&quot;Regex与DFA、NFA&quot;&gt;&lt;/a&gt;Regex与DFA、NFA&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不想看原理可以直接跳过去看例子，部分人可秒懂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正则表达式，又称规则表达式，英文名为Regular Expression，在代码中常简写为regex、regexp或RE，是计算机科学的一个概念。&lt;/p&gt;
&lt;p&gt;正则表通常被用来检索、替换那些符合某个模式(规则)的文本。&lt;/p&gt;
&lt;p&gt;正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。&lt;/p&gt;
&lt;p&gt;正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。&lt;/p&gt;
&lt;p&gt;DFA 引擎在线性时状态下执行，因为它们不要求回溯（并因此它们永远不测试相同的字符两次）。&lt;br&gt;DFA 引擎还可以确保匹配最长的可能的字符串。&lt;br&gt;但是，因为 DFA 引擎只包含有限的状态，所以它不能匹配具有反向引用的模式；并且因为它不构造显示扩展，所以它不可以捕获子表达式。&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="dos" scheme="http://yoursite.com/tags/dos/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>华科印象</title>
    <link href="http://yoursite.com/2017/09/11/hust/"/>
    <id>http://yoursite.com/2017/09/11/hust/</id>
    <published>2017-09-11T14:16:40.000Z</published>
    <updated>2019-08-01T07:10:07.226Z</updated>
    
    <content type="html"><![CDATA[<img src="/assets/blogimg/notes/notes-1.jpg"><p>人啊，总很珍惜回忆，也不是活在过去，<br>只是觉得人真正的财富，不是存在的那一串数字，<br>而是你正享受的现在和你脑海里存在的过去。<br>未来是期待，却不一定是你能拥有的。</p><a id="more"></a><p>来到新的环境已经两月有余，短短的两个月似乎过去了好久，<br>以至于刚刚结束的研究生生涯就已经在记忆中渐渐模糊了。<br>蓦然回首，惊觉记忆不如前啊。<br>也可能是累的。<br>虽说过去已是过去，但我还是喜欢以文字的形式记录下来。<br>于是，就有了华科印象。</p><p>细说印象之前，先来介绍一下华科。<br>官方名曰华中科技大学，老一辈称之为华工，我这一代人口中的华科，未来可能盛行的华中大，<br>以及很多人自嘲的关山口男子职业技术学院。<br>名字就像他的历史一样复杂。<br>然而他最神奇的不是这个，而是省内名气与武大比肩，出了省却只见武大，未闻华科。<br>记得一次与菊厂高管聊天<br>“哪里毕业的？”<br>“华科！”<br>“哦”<br>良久，追问一句<br>“在哪个城市？”<br>心里暗叹，保密工作做的这么好的，华科也算是在如今这浮躁社会的一股清流了。</p><h3 id="毛爷爷像和他背后的南一楼"><a href="#毛爷爷像和他背后的南一楼" class="headerlink" title="毛爷爷像和他背后的南一楼"></a>毛爷爷像和他背后的南一楼</h3><img src="/assets/blogimg/notes/notes-2.jpg"><p>说到华科，就不得不说南大门的毛爷爷像。<br>这个如今被新生各种戏说解读的历史性雕塑，在早四十年那可是神圣不可侵犯的存在。<br>现在早已过了那个疯狂的年代，<br>没有亲身感受也就没法体会活在那个时代到底是一种怎样的经历。<br>只能从零零碎碎的文字间去窥见，去寻觅。</p><blockquote><p>“ 雕像大约是在1967年建起的。那时候学校还叫华中工学院，这尊雕像就是学校铸造厂打造的。雕像是钢筋水泥浇筑的，有人误以为是石膏的，其实外面用的是白水泥，所以是白色的。年代久了以后，因为风雨侵蚀，增出现了水渍印子，后来重新整修了一下，镶嵌了大理石。”<br><br></p></blockquote><blockquote><p>“ 印象里，华科是武汉最早建起毛主席雕像的地方，也是最高大的一尊。此后武汉的一些厂子和机关，也都建起了不少毛主席雕像。”<br><br></p></blockquote><blockquote><p>再后来，别的地方陆陆续续都拆了，唯有华科的一直留存至今。</p></blockquote><p>不管别人怎么去评论，我一直对这个雕像对历史持敬畏态度。<br>记得有次和实验室室友从外面回来，<br>路过雕像谈之，我表敬畏，他表不屑，<br>言毕，突然听他大骂一声，仰头捂鼻狂奔，原来是鼻血涓流不止，<br>我笑他，头上三尺有神明啊。<br>自此，再过雕像处，无不恭谨。</p><p>雕像背后靠着的是南一楼，算是华科老建筑里面标志性的建筑了，<br>也是承载了我两年来大部分记忆的地方了。<br>我是喜欢老建筑的，知道实验室在南一楼这老建筑里面，着实让我欢喜了一段时间。<br>走在里面，明显感觉到与近代建筑不同的沧桑和厚重感，<br>摸着剥落的墙壁前行，有种与历史交流的仪式感。<br>实验室在六楼，不大，也没有计算机系应有的科技感，<br>里面的杂乱和陈旧倒是和南一楼的沧桑相得益彰。</p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/assets/blogimg/notes/notes-1.jpg&quot;&gt;

&lt;p&gt;人啊，总很珍惜回忆，也不是活在过去，&lt;br&gt;只是觉得人真正的财富，不是存在的那一串数字，&lt;br&gt;而是你正享受的现在和你脑海里存在的过去。&lt;br&gt;未来是期待，却不一定是你能拥有的。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="印象" scheme="http://yoursite.com/tags/%E5%8D%B0%E8%B1%A1/"/>
    
  </entry>
  
</feed>
