[{"title":"Hello World","url":"http://yoursite.com/2019/07/29/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"一波太多折","url":"http://yoursite.com/2017/10/09/30/","content":"<img src=\"/assets/blogimg/notes/notes-3.jpg\" width=\"50%\">\n\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>10月7日下午4点58分，十堰到武汉动车。10月8日凌晨6点多武汉到广州的票（虽然后来换票了）。<br>10月7日、10月8日，十堰到武汉的车都无票。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>关于时间节点，描述精确的要么是我看过表，要么是电话记录，要么是滴滴订单。不确定的，描述中会使用x分左右。</p>\n</blockquote>\n<h3 id=\"事情是这样的\"><a href=\"#事情是这样的\" class=\"headerlink\" title=\"事情是这样的\"></a>事情是这样的</h3><p>10月7日中午参加完婚礼，时间1点50，一行四个人闲来无事，买了4张票去看羞羞的铁拳，2点10分到3点50多。<br>看完出来上厕所等电梯拿行李等，到马路边叫了滴滴等，此时4点15分，动车开车时间是4点58分。<br>此时找身份证准备待会儿取票用的时候才发现钱包不见了。赶紧翻包翻箱子，没有找到。</p>\n<p>4点17分左右，滴滴来了，让另外俩小伙伴先走，我和妹子再找找。他们走后，我直接跑到结婚酒店的前台问，告知婚礼的负责在4楼前台，迈着刚爬了青城山和武当山两座大山的酸腿飞奔上四楼，告知没有人捡到，让我自己去5楼大厅看看，此时已经明白基本无望了，还是飞奔而去，果然都收拾干净了，再飞奔下一楼。<br>看时间4点21了。来不及了，错过了这趟车，今天就没有车回武汉，明天也就回不了深圳，明天也没有车去武汉的。。决定先去火车站看能不能搞到临时证明，先去武汉再说。</p>\n<p>4点23分，滴滴接单。</p>\n<p>4点24分，司机打来电话。</p>\n<p>4点27分，上车。</p>\n<p>4点45分，快到车站的时候，堵车，和妹子商量，我先去跑过去搞证明，取票。</p>\n<p>4点46分，拿了她的身份证下车狂奔。此时离开车还有12分，一切顺利就还来得及，只能这么安慰自己。</p>\n<p>你以为老天的考验就这样了？太单纯了。我当时也是。太单纯了。</p>\n<p>4点59分左右，到达人工售票窗口，问清了哪里办临时证件，跑过去，有人在办，窃喜，再一问，告知需要一张照片。WTF，这什么卵规定，我TM现在去哪里弄，工作人员一指，马路对面，我一看时间，4点50了，马路对面？你逗我？目测一里多路，还得找照相馆，还得照，还得洗出来，这怎么可能来得及？感觉世界已经崩塌，自己是走不了了，赶紧去自动取票机帮妹子取了票，等她来了让她先走，能走一个是一个。</p>\n<p>4点51分，妹子一个人拖着箱子，背着一个包，提着包，走过来了，看我在这里等，估计以为都搞好了，结果我拿出一张票给她，你先走，我是走不了了。她愣了一下，也急了，最后问清楚了，说再去说了看看，我说我说过了，不让，必须要照片。<br>最后，4点52分，又去了窗口，这次我们一起说，更显急迫，工作人员 终于答应了，内心狂喜。以为运气来了，结果发现自己还是太单纯。</p>\n<p>4点53分，办好了临时证明，让妹子带着行李先进站了，因为订单号在她手机上，无证取票要订单号，于是我拿着她的手机狂奔去人工取票。三个窗口开着，直接去第一个，插队问，回答她这里办不了，去另一个。到另一个，正在办理，问了两遍不理我。我去第三个，办不了，只能第二个。又跑去第二个，再问，还是不回答，看着她不忙不急的办理，不经历的很难理解当时是一种是心情。</p>\n<p>4点55分，还没办完，忍不住了，再次问能不能先帮我搞下，我58分车。“我搞了半天。总不能取消掉吧，你等着！”我当时竟然笑了。然后看着她又点了会儿，拿出4个身份证一个一个刷，一个一个出票，后面人都看着我，眼里满是同情。第一个买票的大爷，也有点不好意思，抬头看了看我，又看了看售票员，最后低头没说话。我笑着摇了摇头。</p>\n<p>4点57分，到我了，本来已经绝望了，但是票还是得取，20秒取票走人，不忘说一句谢谢。</p>\n<p>再晚一分钟，票过了58分就取不出来了。</p>\n<p>这时候，其实我已经可以放弃了。因为按照常理已经停止检票，就算让你进去了，也只能看着车走了。</p>\n<p>但是我还是疯狂的跑进去了，虽然内心真真正正的已经绝望。</p>\n<p>安检，因为没有行李，所以很快</p>\n<p>4点58到检票处，看到妹子在检票口叫我赶紧，愣了一下，边想着怎么还没停止检票，边飞奔过去。</p>\n<p>检票进去后，看到了之前的俩小伙伴，很是惊讶，一问，他们都说，我运气好，动车起点站晚点的，第一次遇到。不然，我这肯定是赶不上了。</p>\n<p>我这运气，到底是好，还是不好。一言难尽。</p>\n<p>进去后，才发现本来已经酸疼的腿，这一路上竟然一点感觉都没有，直到在车上坐下来才瑟瑟发抖。。。</p>\n<blockquote>\n<p>什么？损失？钱不多，就几十块人民币加几十块港币，记起来200不到。但是身份证，4张银行卡，1张社保卡。。。后续会有多麻烦。</p>\n</blockquote>\n<blockquote>\n<p>教训：以后还是得放些钱在钱包，只有钱包有钱了，平常才会记得时时看看，才会重视。不然，这次没钱，连什么时候掉的都想不起来。。</p>\n</blockquote>\n<br>\n\n<p>所以啊，人生呢<br>不迈出第一步，你永远不知道下一步在哪里。<br>不走到最后一步，你永远不知道结局是什么。</p>\n","categories":["随笔"],"tags":["经历"]},{"title":"Redos攻击原理与检测防御","url":"http://yoursite.com/2017/09/13/redos/","content":"<!-- <img src=\"/assets/blogimg/notes/notes-3.jpg\" width = \"50%\" /> -->\n\n<p><strong>Regular expression Denial of Service (ReDoS)是一种利用程序实现时采用了不安全的正则表达式，从而构造特定输入引起DOS拒绝服务的一种攻击手段。</strong></p>\n<p>在正式讨论ReDos之前，先来介绍一下预备知识。</p>\n<h2 id=\"Regex与DFA、NFA\"><a href=\"#Regex与DFA、NFA\" class=\"headerlink\" title=\"Regex与DFA、NFA\"></a>Regex与DFA、NFA</h2><blockquote>\n<p>不想看原理可以直接跳过去看例子，部分人可秒懂</p>\n</blockquote>\n<p>正则表达式，又称规则表达式，英文名为Regular Expression，在代码中常简写为regex、regexp或RE，是计算机科学的一个概念。</p>\n<p>正则表通常被用来检索、替换那些符合某个模式(规则)的文本。</p>\n<p>正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>\n<p>正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。</p>\n<p>DFA 引擎在线性时状态下执行，因为它们不要求回溯（并因此它们永远不测试相同的字符两次）。<br>DFA 引擎还可以确保匹配最长的可能的字符串。<br>但是，因为 DFA 引擎只包含有限的状态，所以它不能匹配具有反向引用的模式；并且因为它不构造显示扩展，所以它不可以捕获子表达式。</p>\n<a id=\"more\"></a>\n<p>传统的 NFA 引擎运行所谓的“贪婪的”匹配回溯算法，以指定顺序测试正则表达式的所有可能的扩展并接受第一个匹配项。<br>因为传统的 NFA 构造正则表达式的特定扩展以获得成功的匹配，所以它可以捕获子表达式匹配和匹配的反向引用。<br>但是，因为传统的 NFA 回溯，所以它可以访问完全相同的状态多次（如果通过不同的路径到达该状态）。<br>因此，在最坏情况下，它的执行速度可能非常慢。因为传统的 NFA 接受它找到的第一个匹配，所以它还可能会导致其他（可能更长）匹配未被发现。</p>\n<p>POSIX NFA 引擎与传统的 NFA 引擎类似。<br>不同的一点在于：在它们可以确保已找到了可能的最长的匹配之前，它们将继续回溯。<br>因此，POSIX NFA 引擎的速度慢于传统的 NFA 引擎；并且在使用 POSIX NFA 时，您恐怕不会愿意在更改回溯搜索的顺序的情况下来支持较短的匹配搜索，而非较长的匹配搜索。</p>\n<ul>\n<li>使用DFA引擎的程序主要有：awk,egrep,flex,lex,MySQL,Procmail等；</li>\n<li>使用传统型NFA引擎的程序主要有：GNU Emacs,Java,ergp,less,more,.NET语言,PCRE library,Perl,PHP,Python,Ruby,sed,vi；</li>\n<li>使用POSIX NFA引擎的程序主要有：mawk,Mortice Kern Systems’ utilities,GNU Emacs(使用时可以明确指定)；</li>\n<li>也有使用DFA/NFA混合的引擎：GNU awk,GNU grep/egrep,Tcl。</li>\n</ul>\n<p><strong>下面用实例来说明正则匹配时，NFA与DFA引擎的区别：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串： hello regextest</span><br><span class=\"line\">正则表达式：  \\reg(axtest|extext|extest)</span><br></pre></td></tr></table></figure>\n\n<p><code>DFA</code>：拿着字符串文本去匹配正则表达式。<br>hello没有正则匹配的，去掉，reg匹配上了，继续；exte和第二、三分支匹配，继续；st和第三分支匹配，至此，regextest匹配成功，结束。过程中字符串只遍历了一次。</p>\n<p><code>NFA</code>：拿着正则表达式去对比字符串文本。<br>r-&gt;淘汰hello，匹配到r，e-&gt;e，g-&gt;g，a-&gt;e失败，回溯到上一个匹配的g，匹配下一个正则，e-&gt;e，x-&gt;x，t-&gt;t，e-&gt;e，x-&gt;s失败，回溯到上一个匹配的e，匹配下一个正则，s-&gt;s，t-&gt;t，匹配成功，结束。过程中字符串遍历了多次。</p>\n<h3 id=\"DOS\"><a href=\"#DOS\" class=\"headerlink\" title=\"DOS\"></a>DOS</h3><p><strong>DOS攻击</strong>这里引用段子嘎的介绍：<br>DoS（Denial of Service，拒绝服务）是一种网络攻击手段，通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。<br>形象一点的比喻是，你开了一家小面馆，黑客派了几个广场的大爷大妈涌入你的店里坐着吹空调，也不消费就霸着场子，导致其他顾客根本无法进店消费。<br>想详细了解可自行去查资料。</p>\n<br>\n\n<h2 id=\"下面开始介绍本文重点：ReDos\"><a href=\"#下面开始介绍本文重点：ReDos\" class=\"headerlink\" title=\"下面开始介绍本文重点：ReDos\"></a>下面开始介绍本文重点：ReDos</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>本文主要介绍使用NFA引擎的程序语言，使用DFA引擎的程序不存在ReDos。因为NFA引擎的回溯机制，导致了当字符串文本与正则表达式不匹配时，所花费的时间要比匹配时长的多。<br>简单点说，确定匹配成功就不做了，但是要确定匹配失败，则需要与所有可能的路径进行对比匹配，都证明匹配不了，才能确定匹配失败。</p>\n<p>此时，如果使用简单的非分组正则表达式来进行匹配，也不会引起问题，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d+$</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>1）23x<br>23,<code>x</code>　　2,<code>3x</code>    　　<code>23x</code><br>标粗部分为确认不匹配的部分，第一次遇到不匹配时回溯到上一个继续进行匹配，共<code>3</code>次</p>\n</li>\n<li><p>2）123x<br>123,<code>x</code>　　12,<code>3x</code>　　1,<code>23x</code>　　<code>123x</code><br>标粗部分为确认不匹配的部分，第一次遇到不匹配时回溯到上一个继续进行匹配，共<code>4</code>次</p>\n</li>\n</ul>\n<p>此时呈<code>线性</code>增长。</p>\n<p>但是，如果使用重复性分组正则表达式来进行匹配，则可能引起问题，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\(d+)+$</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>1）23x<br>23,<code>x</code>　　2,3,<code>x</code>　　2,<code>3x</code>    　　<code>23x</code><br>标粗部分为确认不匹配的部分，迭代多次才能确认原字符串不匹配，总共需要<code>2^2 = 4</code>次</p>\n</li>\n<li><p>2）123x<br>123,<code>x</code>　　12,3,<code>x</code>　　12,<code>3x</code>　　1,23,<code>x</code>　　1,2,3,<code>x</code>　　1,2,<code>3x</code>　　1,<code>23x</code>　　<code>123x</code><br>标粗部分为确认不匹配的部分，迭代多次才能确认原字符串不匹配，总共需要<code>2^3 = 8</code>次</p>\n</li>\n</ul>\n<p>此时呈<code>指数</code>增长。</p>\n<br>\n\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">strs = (</span><br><span class=\"line\">    <span class=\"string\">'1234567890x'</span>,</span><br><span class=\"line\">    <span class=\"string\">'12345678901234567890x'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1234567890123456789012345x'</span>,</span><br><span class=\"line\">    <span class=\"string\">'12345678901234567890123456x'</span>,</span><br><span class=\"line\">    <span class=\"string\">'123456789012345678901234567x'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1234567890123456789012345678x'</span>,</span><br><span class=\"line\">    <span class=\"string\">'12345678901234567890123456789x'</span></span><br><span class=\"line\">)</span><br><span class=\"line\">regex = <span class=\"string\">'^(\\d+)+$'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">(strs, regex)</span>:</span></span><br><span class=\"line\">    t1 = time.time()</span><br><span class=\"line\">    result = re.compile(regex).match(strs)</span><br><span class=\"line\">    t2 = time.time()</span><br><span class=\"line\">    print(<span class=\"string\">\"%s : %s : %.2f\"</span> % (strs, str(result), (t2 - t1)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">    fun(s, regex)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Python\\Python36\\python.exe D:/python/get_hi3ms_user_files/redos/redos.py</span><br><span class=\"line\">1234567890x : None : 0.00</span><br><span class=\"line\">12345678901234567890x : None : 0.09</span><br><span class=\"line\">1234567890123456789012345x : None : 2.95</span><br><span class=\"line\">12345678901234567890123456x : None : 5.92</span><br><span class=\"line\">123456789012345678901234567x : None : 12.51</span><br><span class=\"line\">1234567890123456789012345678x : None : 24.68</span><br><span class=\"line\">12345678901234567890123456789x : None : 52.39</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<p>可以看出每增加一位，其运行时间呈现<strong>指数</strong>增长。</p>\n<p>再来查看运行时的CPU占用，测试机子为4核电脑，单进程跑，CPU25%，单核占满了。<br><img src=\"/assets/blogimg/security/redos-1.png\"></p>\n<p>同时运行4个程序就能跑满100%CPU，可造成拒绝服务。<br><img src=\"/assets/blogimg/security/redos-2.png\"></p>\n<h3 id=\"影响\"><a href=\"#影响\" class=\"headerlink\" title=\"影响\"></a>影响</h3><p>容易引起ReDos的正则表达式主要有两类：<br>1、    包含具有自我重复的重复性分组的正则，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(\\d+)+$</span><br><span class=\"line\">^(\\d*)*$</span><br><span class=\"line\">^(\\d+)*$</span><br><span class=\"line\">^(\\d+|\\s+)*$</span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure>\n\n<p>2、    包含替换的重复性分组，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(\\d|\\d|\\d)+$</span><br><span class=\"line\">^(\\d|\\d?)+$</span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure>\n\n<p>目前已经在使用的，甚至是一些官方提供的正则表达式，也可能存在缺陷：</p>\n<p>1、    <a href=\"（http://regexlib.com/REDetails.aspx?regexp_id=1757&AspxAutoDetectCookieSupport=1）\">正则表达式库网站中，提供的专门用于验证电子邮件的正则</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^([a-zA-Z0-9])(([\\-.]|[_]+)?([a-zA-Z0-9]+))*(@)&#123;1&#125;[a-z0-9]+[.]&#123;1&#125;(([a-z]&#123;2,3&#125;)|([a-z]&#123;2,3&#125;[.]&#123;1&#125;[a-z]&#123;2,3&#125;))$/</span><br></pre></td></tr></table></figure>\n\n<p>输入：aaaaaaaaaaaaaaaaaaaaaaaa!</p>\n<p>2、    <a href=\"https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository\" target=\"_blank\" rel=\"noopener\">OWASP验证正则表达式库</a>，这也是一个有缺陷的正则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(([a-z])+.)+[A-Z]([a-z])+$</span><br></pre></td></tr></table></figure>\n\n<p>输入：aaaaaaaaaaaaaaaaaaaaaaaa!</p>\n<p>3、    常用的：<br>多个邮箱地址验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[a-zA-Z]+(([\\&apos;\\,\\.\\-][a-zA-Z ])?[a-zA-Z]*)*\\s+&amp;lt;(\\w[-._\\w]*\\w@\\w[-._\\w]*\\w\\.\\w&#123;2,3&#125;)&amp;gt;$|^(\\w[-._\\w]*\\w@\\w[-._\\w]*\\w\\.\\w&#123;2,3&#125;)$</span><br></pre></td></tr></table></figure>\n\n<p>输入: aaaaaaaaaaaaaaaaaaaaaaaa!</p>\n<p>复数验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d*[0-9](|.\\d*[0-9]|)*$</span><br></pre></td></tr></table></figure>\n\n<p>输入: 1111111111111111111111111!</p>\n<p>模式匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^([a-z0-9]+([\\-a-z0-9]*[a-z0-9]+)?\\.)&#123;0,&#125;([a-z0-9]+([\\-a-z0-9]*[a-z0-9]+)?)&#123;1,63&#125;(\\.[a-z0-9]&#123;2,7&#125;)+$</span><br></pre></td></tr></table></figure>\n\n<p>输入: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</p>\n<p>另外，攻击者也可能通过输入来自己构造缺陷正则，从而发起攻击：<br>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String userName = textBox1.Text;</span><br><span class=\"line\">String password = textBox2.Text;</span><br><span class=\"line\">Regex testPassword = <span class=\"keyword\">new</span> Regex(userName);</span><br><span class=\"line\">match match = testPassword.Match(password);</span><br></pre></td></tr></table></figure>\n\n<p>此时，攻击者输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Userame：^(( [az])+.)+ [AZ]([az])+$</span><br><span class=\"line\">Password：aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa！</span><br></pre></td></tr></table></figure>\n\n<p>则会引起ReDos.</p>\n<h3 id=\"风险因素\"><a href=\"#风险因素\" class=\"headerlink\" title=\"风险因素\"></a>风险因素</h3><img src=\"/assets/blogimg/security/redos-3.png\">\n\n<p>在web的每一层都包含有正则表达式，也就是每一层都会存在有缺陷的正则风险。<br>攻击者能够攻击Web浏览器（PC端或者移动端）、WAF、数据库或者是Web服务器。</p>\n<h3 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h3><p>其实理想的方法是在代码编译时用一个正则去查找匹配存在缺陷的正则表达式，然而搜索了一下，没有找到这种有效的正则。目前比较好的检测手段主要分两种。</p>\n<ul>\n<li>一是静态代码工具分析，通过抓取代码中的正则去匹配已知的存在缺陷的特征库，重点需要检测存在分组和重复的正则，这种方法的准确率主要依赖于特征库的质量。</li>\n<li>二是通过模糊测试去程序中进行检测。在使用了正则的地方不断使用多种字符串去进行输入匹配，记录下引擎在判断是否匹配时花费的时间，时间过长则很有可能存在不安全的正则。这种方法依赖于构造的字符串是否够全面。</li>\n</ul>\n<h3 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h3><p>目前主要的防御手段主要还是在程序中避免出现不安全的正则：</p>\n<ul>\n<li>1、    在编写正则的时候，尽量不要使用过于复杂的正则，越复杂越容易有缺陷，且越不容易进行全面的测试；</li>\n<li>2、    编写正则的时候，尽量减少分组的使用量，使用的越多出现缺陷的可能性越大</li>\n<li>3、    避免动态构造正则（即new Regex(…)），如果需要构造，也保证不要使用用户的输入来进行动态构造。</li>\n<li>4、    严格限制用户输入的长度限制。</li>\n</ul>\n<p>服务端可以进行性能监控，暂时还没法进行有效的防御。</p>\n<br>\n<br>\n\n\n<p>参考链接：<br><a href=\"https://msdn.microsoft.com/zh-cn/magazine/ff646973.aspx\" target=\"_blank\" rel=\"noopener\">https://msdn.microsoft.com/zh-cn/magazine/ff646973.aspx</a><br><a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\" target=\"_blank\" rel=\"noopener\">https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS</a><br><a href=\"https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin</a><br><a href=\"http://www.freebuf.com/articles/network/124422.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/network/124422.html</a></p>\n","categories":["安全"],"tags":["dos","正则表达式"]},{"title":"华科印象","url":"http://yoursite.com/2017/09/11/hust/","content":"<img src=\"/assets/blogimg/notes/notes-1.jpg\" width=\"50%\">\n\n<p>人啊，总很珍惜回忆，也不是活在过去，<br>只是觉得人真正的财富，不是存在的那一串数字，<br>而是你正享受的现在和你脑海里存在的过去。<br>未来是期待，却不一定是你能拥有的。</p>\n<a id=\"more\"></a>\n<p>来到新的环境已经两月有余，短短的两个月似乎过去了好久，<br>以至于刚刚结束的研究生生涯就已经在记忆中渐渐模糊了。<br>蓦然回首，惊觉记忆不如前啊。<br>也可能是累的。<br>虽说过去已是过去，但我还是喜欢以文字的形式记录下来。<br>于是，就有了华科印象。</p>\n<p>细说印象之前，先来介绍一下华科。<br>官方名曰华中科技大学，老一辈称之为华工，我这一代人口中的华科，未来可能盛行的华中大，<br>以及很多人自嘲的关山口男子职业技术学院。<br>名字就像他的历史一样复杂。<br>然而他最神奇的不是这个，而是省内名气与武大比肩，出了省却只见武大，未闻华科。<br>记得一次与菊厂高管聊天<br>“哪里毕业的？”<br>“华科！”<br>“哦”<br>良久，追问一句<br>“在哪个城市？”<br>心里暗叹，保密工作做的这么好的，华科也算是在如今这浮躁社会的一股清流了。</p>\n<h3 id=\"毛爷爷像和他背后的南一楼\"><a href=\"#毛爷爷像和他背后的南一楼\" class=\"headerlink\" title=\"毛爷爷像和他背后的南一楼\"></a>毛爷爷像和他背后的南一楼</h3><img src=\"/assets/blogimg/notes/notes-2.jpg\" width=\"50%\">\n\n<p>说到华科，就不得不说南大门的毛爷爷像。<br>这个如今被新生各种戏说解读的历史性雕塑，在早四十年那可是神圣不可侵犯的存在。<br>现在早已过了那个疯狂的年代，<br>没有亲身感受也就没法体会活在那个时代到底是一种怎样的经历。<br>只能从零零碎碎的文字间去窥见，去寻觅。</p>\n<blockquote>\n<p>“ 雕像大约是在1967年建起的。那时候学校还叫华中工学院，这尊雕像就是学校铸造厂打造的。雕像是钢筋水泥浇筑的，有人误以为是石膏的，其实外面用的是白水泥，所以是白色的。年代久了以后，因为风雨侵蚀，增出现了水渍印子，后来重新整修了一下，镶嵌了大理石。”<br><br></p>\n</blockquote>\n<blockquote>\n<p>“ 印象里，华科是武汉最早建起毛主席雕像的地方，也是最高大的一尊。此后武汉的一些厂子和机关，也都建起了不少毛主席雕像。”<br><br></p>\n</blockquote>\n<blockquote>\n<p>再后来，别的地方陆陆续续都拆了，唯有华科的一直留存至今。</p>\n</blockquote>\n<p>不管别人怎么去评论，我一直对这个雕像对历史持敬畏态度。<br>记得有次和实验室室友从外面回来，<br>路过雕像谈之，我表敬畏，他表不屑，<br>言毕，突然听他大骂一声，仰头捂鼻狂奔，原来是鼻血涓流不止，<br>我笑他，头上三尺有神明啊。<br>自此，再过雕像处，无不恭谨。</p>\n<p>雕像背后靠着的是南一楼，算是华科老建筑里面标志性的建筑了，<br>也是承载了我两年来大部分记忆的地方了。<br>我是喜欢老建筑的，知道实验室在南一楼这老建筑里面，着实让我欢喜了一段时间。<br>走在里面，明显感觉到与近代建筑不同的沧桑和厚重感，<br>摸着剥落的墙壁前行，有种与历史交流的仪式感。<br>实验室在六楼，不大，也没有计算机系应有的科技感，<br>里面的杂乱和陈旧倒是和南一楼的沧桑相得益彰。</p>\n<p>未完待续…</p>\n","categories":["随笔"],"tags":["印象"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"标签","url":"http://yoursite.com/archives/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]